<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Amit Kumar</title>
 <link href="http://0.0.0.0:4000/blog/feeds/atom.xml" rel="self"/>
 <link href="http://0.0.0.0:4000/blog"/>
 <updated>2017-03-20T00:43:24+05:30</updated>
 <id>http://0.0.0.0:4000</id>
 <author>
   <name>Amit Kumar</name>
   <email>dtu.amit@gmail.com</email>
 </author>

 
 <entry>
   <title>The First PyCon Pune'17</title>
   <link href="http://0.0.0.0:4000/blog/pycon-pune-2017"/>
   <updated>2017-03-19T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/The-First-PyCon Pune-2017</id>
   <content type="html">&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/pycon-pune-2017/pycon_pune_group_photo.jpg&quot;&gt;&lt;/p&gt;

&lt;p&gt;Now we have three Python Conferences in India! After PyCon India &amp;amp; PyDelhi
Conference, &lt;a href=&quot;https://pune.pycon.org/&quot;&gt;PyCon Pune&lt;/a&gt; is the first of its kind regional PyCon and I was
delighted to get a chance to attend such an amazing conference. It was a 4-day event,
with a couple of days for a conference and a couple of days for Dev Sprint. I reached
Pune on 16th Morning, thanks to &lt;a href=&quot;https://twitter.com/yudocaa&quot;&gt;Sayan&lt;/a&gt; and
&lt;a href=&quot;https://twitter.com/chkumar246&quot;&gt;Chandan&lt;/a&gt; for accommodating me at their
place. Their house was like a Hacker space throughout the conference, as a lot of
friends crashed there.&lt;/p&gt;

&lt;h2&gt;Day 1&lt;/h2&gt;

&lt;p&gt;Day 1 started with Kushal picking us to the conference venue in his car, The
first thing that astonished me was the quote on the back of his T-Shirt:&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/pycon-pune-2017/kushal-pycon-pune.jpg&quot;&gt;&lt;/p&gt;

&lt;p&gt;The Conference started with the Keynote by Honza Kr√°l, who is a core contributor to
Django. He talked about his OSS Life. It was followed by a talk on &amp;quot;Writing
Beautiful Code&amp;quot; by Anand Chitipothu who is a co-author of web.py. In the Afternoon
John Hawley who is a Perl guy declared a Python programmer gave the Keynote.
John is an Interesting guy so was his talk. I and &lt;a href=&quot;http://github.com/CuriousLearner&quot;&gt;Sanyam&lt;/a&gt;
met him in Delhi and had a dinner together. In the evening Praveen Patil gave a talk on
&amp;quot;Python in my Science Classroom&amp;quot;. He showed how he uses Python to help
kids visualize various concepts of Physics.&lt;/p&gt;

&lt;h2&gt;Day 2&lt;/h2&gt;

&lt;p&gt;It started with Kushal again picking up from our place. He took us to
&lt;a href=&quot;https://twitter.com/siddhesh_p&quot;&gt;Sidesh&amp;#39;s&lt;/a&gt; Reservedbit&amp;#39;s office to pick
the T-Shirts for the conference. We reached there at around 9 AM. The first talk
was the Keynote by Katie Cunningham, who is a speaker, teacher, and writer
of technical books. I had met Katie in PyGotham 2016 in New York, where she
delivered a Keynote. It was nice to see her again. The day was filled with lots
of awesome talks like the Talk by Stephen Turbull describing the ways to contribute
for the development of Python. It was followed by Farhaan&amp;#39;s talk on Pagure, which
was his GSoC Project. I met him first in PyCon India 2015 during SymPy Dev
Sprint. Then there was a talk by Noufal, who is a veteran in Python India&amp;#39;s
Community. In the afternoon we had a Keynote by Nick Coghlan who is a core
Developer of CPython. In the evening Terri Odda gave the Keynote. I knew
about her Since my Google Summer of Code 2015, as she was representing PSF
in GSoC. It was a pleasure meeting her for the first time. In the evening
all of us went for the Dinner at the Deccan in Magarpatta City. The conference
concluded after this.&lt;/p&gt;

&lt;h2&gt;Day 3 &amp;amp; 4&lt;/h2&gt;

&lt;p&gt;Day 3 and 4 were scheduled for the Dev Sprints. It was a brave decision
to have the conference on weekdays and sprints in the weekend, but it worked
well. I was glad to see the turnout. The Dev Sprint was at RedHat&amp;#39;s Office
at Magarpatta City. This was probably the best Dev Sprint I ever had in any
of the conferences. I decided to contribute to CPython as Nick Coghlan was
mentoring for it. I submitted 4 patches into CPython, during the Dev Sprints.
After the Dev Sprint on Day 3, we went to hang around Pune. Amol took us to
a famous Vada Pav place. It was an awesome weekend. I &amp;amp; Sanyam left in the
evening on Day 4 to catch our flights to Delhi.&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/pycon-pune-2017/pycon_pune_dev_sprint.jpg&quot;&gt;&lt;/p&gt;

&lt;p&gt;It was a marvelous experience throughout the Conference. Everything was well
Organized. Management was absolutely amazing. It was great to see the Energy
of all the Volunteers. Kudos to the organizing team of PyCon Pune.
I am looking forward to PyCon Pune 2018!&lt;/p&gt;

&lt;p&gt;Picture Credits: &lt;a href=&quot;https://www.flickr.com/photos/kushaldas&quot;&gt;Kushal Das&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>PyCon UK 2016 &#58; Python in Wales!</title>
   <link href="http://0.0.0.0:4000/blog/pycon-uk-2016"/>
   <updated>2016-11-06T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/PyCon UK &#58; Python in Wales</id>
   <content type="html">&lt;p&gt;This is an anecdote of my Journey to the United Kingdom for &lt;a href=&quot;http://2016.pyconuk.org/&quot;&gt;PyCon UK&lt;/a&gt;. It was held at Cardiff, the capital of Wales (a country in South West Britain). I took a flight to London from Delhi via Doha (Qatar) as it was cheaper than directly getting to Cardiff. I usually prefer flights with layovers, when I am not running short of time as it gives me an opportunity to have a glimpse of culture of people from different nationalities. I spent few Days in London to explore the City then I went to Cardiff with Sartaj and Manoj to attend PyCon UK. There we stayed at Hostel called as BunkHouse, which was pretty close to the conference venue. Here is a picture of the venue of the conference.&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&quot;/assets/pycon-uk-2016/pycon-uk-cardiff-city-hall.jpg&quot; width=&quot;600&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2&gt;Day 0&lt;/h2&gt;

&lt;p&gt;We reached Cardiff on 15th, the Day 0 of the programme (Open Day) was at Cardiff University Bute Building. The Day 0 consists of talks from various domain like python in education, RaspberryPi, Micro:Bit, NLP, with parallel workshops of Django Girls. I met some of the organisers including Cory and also Nicolas, who delivered a Keynote in PyCon India 2015. The most interesting thing I saw there was text-to-speech of all the talks during the talk. I was totally amazed to see that, later I realized that a couple of people were doing this in real time. They did a wonderful job in doing it with great accuracy and speed!&lt;/p&gt;

&lt;h2&gt;Day 1&lt;/h2&gt;

&lt;p&gt;The main Conference started on 16th September at Cardiff City Hall with the introduction by Peter, (Conference Chair) followed by the Keynote by &lt;a href=&quot;https://twitter.com/brandon_rhodes&quot;&gt;Brandon Rhodes&lt;/a&gt; on &amp;quot;&lt;a href=&quot;https://www.youtube.com/watch?v=zFMdhXYlFfY&quot;&gt;Python and the Glories of the UNIX Tradition&lt;/a&gt;&amp;quot;. It was a brilliant keynote! I have been following Brandon Rhodes since the time, I thought of learning about how Python actually works. His talk on &lt;a href=&quot;https://www.youtube.com/watch?v=C4Kc8xzcA68&quot;&gt;The Mighty Dictionary&lt;/a&gt; is one of the masterpieces! It was great to talk to a guy, I have been following.&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&quot;/assets/pycon-uk-2016/pycon-uk-2016-day1.jpg&quot; width=&quot;600&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2&gt;Day 2&lt;/h2&gt;

&lt;p&gt;The Day 2 of the conference started with the Keynote by Gail Ollis on &amp;quot;Folklore and fantasy in the information age&amp;quot;. I couldn&amp;#39;t attend this talk as my talk was scheduled just after the Keynote and I had to gear up for my talk. I delivered a talk on &lt;a href=&quot;http://slides.com/aktech/introducing-metaclasses-in-python&quot;&gt;Introducing MetaClasses&lt;/a&gt;. The organization of conference was so amazing that I gave the talk in the morning and the video was up in the evening, Here is a Video of my Talk:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/UXuhj-Tc-qE&quot; frameborder=&quot;0&quot; allowfullscreen&gt;
&lt;/iframe&gt;

&lt;h2&gt;Day 3&lt;/h2&gt;

&lt;p&gt;Day 3 started with an excellent Keynote by &lt;a href=&quot;https://twitter.com/_bashar&quot;&gt;Bashar Al-Abdulhadi&lt;/a&gt; who shared ideas on why should developers work on translation/internationalization of their packages. I was really impressed by this talk. His talk was an unconventional one as compared to other PyCon&amp;#39;s as he didn&amp;#39;t talked much about code instead he talked about the reach of code, which is an important aspect of building community. I sincerely feel, that he did total justice to the Keynote, as IMO Keynote should talk about the community rather than code, &amp;amp; he did exactly the same. It was wonderful chatting with him, looking forward to meet him soon.&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&quot;/assets/pycon-uk-2016/Bashar-Al-Abdulhadi-pycon-uk.jpg&quot; width=&quot;600&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2&gt;Day 4 : Sprints&lt;/h2&gt;

&lt;p&gt;Sprints is an important aspect of a conference and how you organize it decides its success. In PyCon UK, it was well organized and was productive as well. I and Sartaj sprinted for &lt;a href=&quot;https://github.com/sympy/sympy&quot;&gt;SymPy&lt;/a&gt;. SymPy got a bunch of people interested for contribution. Some of them also made some Pull requests and few got them merged as well. At the end of the conference all us announced the progress we made throughout the day. It was overwhelming to see the amount of progress made in one day.&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&quot;/assets/pycon-uk-2016/pycon-uk-sprints.jpg&quot; width=&quot;600&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;It was a great experience attending PyCon UK and meeting some of the most amazing people in the Python Community. Thanks to the Organizers &lt;a href=&quot;https://twitter.com/inglesp&quot;&gt;Peter&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/Lukasaoz&quot;&gt;Cory&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/evildmp&quot;&gt;Daniele&lt;/a&gt; &amp;amp; the whole PyCon UK organizing Team for having me there. It wouldn&amp;#39;t have been possible without there support. I look forward to meet them soon. Cardiff and London were wonderful places to explore as well.&lt;/p&gt;

&lt;p&gt;Kudos to the Volunteers, Great Job!&lt;/p&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&quot;/assets/pycon-uk-2016/pycon-uk-volunteers.jpg&quot; width=&quot;600&quot;&gt;&lt;/center&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Summer 2016 @ HackerEarth</title>
   <link href="http://0.0.0.0:4000/blog/summer-2016-hackerearth"/>
   <updated>2016-10-30T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/Summer 2016 &#64; HackerEarth</id>
   <content type="html">&lt;p&gt;&lt;center&gt; &lt;img src=&quot;/assets/hackerearth/HE_logo.png&quot; width=&quot;200&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;I was done with my college exams by the end of May 2016, and was looking to work on something
interesting. I had an internship offer from HackerEarth in Bangalore, which I had applied for
couple of months ago. It was a tough choice as I had to decline a full time offer for this
internship. I chosed to intern at HackerEarth as I had heard good things about HackerEarth&amp;#39;s 
Engineering Team. I went to Bangalore on 4th June as my internship was about to start on 6th. 
It was my second visit to Bangalore, the first one was in 2015 during PyCon India.&lt;/p&gt;

&lt;p&gt;On the second day I came to know that I would be working with the Research &amp;amp; Development Team.
There I met my Mentor &amp;amp; Manager Praveen Kumar who heads the R &amp;amp; D and Engineering at 
HackerEarth. It was the first time, when I worked on a web application. HackerEarth was built
with Python and Django.&lt;/p&gt;

&lt;h2&gt;Work&lt;/h2&gt;

&lt;p&gt;I was working on making the code editor intelligent, so that users have better experience,
while submitting solutions to problems on HackerEarth. My first task was to show the standard
error logs (stderr), whenever there is a Runtime Error, as earlier only a &lt;code&gt;RE&lt;/code&gt; was displayed
during a RunTime Error, which was not very insightful for the user. If you use HackerEarth now,
you can notice the new column named (Error Log) in the submission results.&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/hackerearth/hackerearth-submission-table.png&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;p&gt;After this, my next job was to show better insights of the Standard Error logs, so that users
can make more sense out of it and improve their code and hence improve their chances of having
the solution accepted. At this point the error logs would look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/hackerearth/raw-error-log.png&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;p&gt;I had to analyse the error logs and do R &amp;amp; D to build this system, thanks to my mentors Shubham
and Praveen for helping me in Designing that System to show better error logs. The Error logs
now looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/hackerearth/hackerearth-error-log.png&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;p&gt;I also worked on giving suggestions to the user based on their output with respect to the
expected output. (Note: Nothing fancy here! :P)&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/hackerearth/hackerearth-output-suggestion.png&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Final Words&lt;/h2&gt;

&lt;p&gt;It was a great experience, interning at HackerEarth. I highly recommend anyone, planning to
work with a great Team. Thanks to all the people whom I met there (Praveen, Shubham, Vivek,
Vishal, Santosh, Manoj, Rahul, Viru, Sreeram, Sudip), I learnt a lot of stuff in that short
term intern. I went to three conference during my internship, thanks to Praveen &amp;amp; Vivek for
bearing with that. And last but not the least thanks to Prabhat and Santosh for the last
moment Farewell!&lt;/p&gt;

&lt;p&gt;Team HackerEarth @ Wonderla!&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/hackerearth/hackerearth-wonderla.jpg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>PyCon Asia Pacific 2016 &#58; Respect Diversity</title>
   <link href="http://0.0.0.0:4000/blog/pycon-apac-2016"/>
   <updated>2016-09-20T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/PyCon-Asia-Pacific-2016 &#58; Respect Diversity</id>
   <content type="html">&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/pycon_apac_2016/respect-diversity.jpg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;p&gt;&amp;quot;Respect Diversity&amp;quot; is what comes to my mind, when I recall the &lt;a href=&quot;https://www.pycon.kr/2016apac/&quot;&gt;PyCon Asia Pacific
2016&lt;/a&gt; in Seoul, South Korea. It was probably the best conference I have ever been to
in the recent times. I made a lot of friends and meet some amazing people there.
Thanks to the PyCon SG and PyCon APAC for helping me financially in attending the
conference and giving me the opportunity to present there. Thanks to Korean Embassy
that I fortunately recieved my visa, just 12 hrs before my flight.&lt;/p&gt;

&lt;p&gt;I reached Seoul on 12th August after an extremely long journey due to 20 hour layover
in Guanghzou, China. I stayed at place called Nonhyeon-dong in Gangnum-gu, (the place
where Psy did that famous Gangnam Style. ;). It was a nice place, probably the best
place I could stay in Seoul. Fortunately I managed to get a cheap airbnb near the
conference venue.&lt;/p&gt;

&lt;h2&gt;Day 1&lt;/h2&gt;

&lt;p&gt;I reached the venue pretty early at around 8:30. I was amazed by the beauty of the
venue, the Coex Mall, asia&amp;#39;s largest underground shopping mall.&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/pycon_apac_2016/coex.jpg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;p&gt;The moment I went inside, I had the feeling that this is probably the best conference, venue
I have ever seen. Kudos to the organizers for putting up all the hardwork to
get such a venue. The Day 1 started with the Keynote by &lt;a href=&quot;http://wesmckinney.com/&quot;&gt;Wes McKinney&lt;/a&gt;, where
he discussed various aspects of Open Source. He was an accidental Software Developer,
who started writing python libraries to make his work better. He also talked about,
how the Open Source can be made sustainable and also discussed a bit about pandas, of
which he is the author.&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/pycon_apac_2016/wes-keynote.jpg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;p&gt;The second keynote was by &lt;a href=&quot;https://jacobian.org/&quot;&gt;Jacob Kaplan-Moss&lt;/a&gt; who unfortunately couldn&amp;#39;t come to
the conference, though he delivered Keynote through Google Hangouts, which was
broadcasted live into the hall.&lt;/p&gt;

&lt;p&gt;My talk was scheduled in the evening. Quite a good number of people showed up, although
it was the last talk of the day.&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/pycon_apac_2016/amit-talk-poster.jpg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;p&gt;I started my talk in Korean, which I learnt from from friend Hassan and Sujin.
They got pretty excited by hearing Korean from an Indian. Here is the video of my talk.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/cuonAMJjHow&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;In the evening, we went to a nearby temple which was pretty amazing. I also met Jason
and Amanda, who became good friends.&lt;/p&gt;

&lt;h2&gt;Day 2&lt;/h2&gt;

&lt;p&gt;The Day 2 was more interesting than one, as it started with meeting &lt;a href=&quot;http://lucumr.pocoo.org/about/&quot;&gt;Armin Ronacher&lt;/a&gt;,
who is known for creation of Flask. It was an excellent talk, he talked about the
various lessons he learned from working on various projects. His talk was followed by
Maciej Fija≈Çkowski, who is a core Developer of PyPy. He talked about various aspects
of funding in Open Source, which is indeed a crucial component for the sustainance of
Open Source projects. There were lots of interesting talk on Day 2. There was a high
school guy, who gave a talk on Django vs Flask, but unfortunately it was in Korean.
One of the talk was so well recieved that they had to repeat it twice!
(Building AI Chat bot using Python 3 &amp;amp; TensorFlow)&lt;/p&gt;

&lt;p&gt;The Day two ended with the lightning talks, where I gave a talk on Soldier, a
module written by friend of mine on top of subprocess module to provide an nice
user API to the user.&lt;/p&gt;

&lt;p&gt;We were called for a nice Dinner at Viking&amp;#39;s Buffet after the conference, with all
the speakers and volunteers. It was a great evening spent with all the geeks around.&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/pycon_apac_2016/pycon-apac-dinner.jpg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Day 3&lt;/h2&gt;

&lt;p&gt;The Day 3 was at Akamai&amp;#39;s office, which was a small venue. That venue was made
available for sprints. There were a few projects to sprint on. In the afternoon
there was a Djano Girls Seoul workshop conducted by my friends Hassan and Sujin,
which was nice introduction to getting started up with Django for a lot of people.&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/pycon_apac_2016/django-girls-seoul.jpg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;p&gt;After spending some time there, I went to explore Seoul with Amanda. We went to
various tourist places, throughout the Day. She took me to her friend Navid who is
doing some research in Seoul, and he was a very nice guy and we had dinner together.
Navid took to various places in Seoul after dinner and we left at around 3:00 AM
(Yes, you read it, right!). It was an amazing experience, there were some malls and
shop which were only open during night, so I got enough time to explore them.&lt;/p&gt;

&lt;p&gt;I spent my Day 4 mainly for tourism and explored an lot of places alone and was joined
by few of the others attendees in the afternoon. I also got the chance to see some
Archery by some veterans, Hyeokwoo Alex Kwon took me there, who is a Korean by
birth, and studying at University of Toronto, Canada.&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/pycon_apac_2016/korea-archery.jpg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;p&gt;I am thankful to a lot of people for making my stay and journey comfortable in
Seoul, I would like to thank all of them specially Amanda, Jason, Hassan, Kookheon,
Sujin lee, Younggun Kim, Liew Beng Keat, I don&amp;#39;t remember all the names, sorry,
If I missed some of them! Thanks to whole team of PyCon APAC 2016 for putting up
a wonderful show at Coex, PyCon SG for generously funding my travel and Kookheon
for helping me with getting documents for making my travel possible. Kudos to the
whole community! Looking forward to come back soon! ;)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>PyGotham 2016 &#58; Journey to the West II</title>
   <link href="http://0.0.0.0:4000/blog/pygotham-2016"/>
   <updated>2016-09-02T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/PyGotham-2016 &#58; Journey to the West II</id>
   <content type="html">&lt;p&gt;This post is the second in the series of my &lt;a href=&quot;http://iamit.in/blog/scipy-2016/&quot;&gt;Journey to the West&lt;/a&gt;.
It describes my experience of attending &lt;a href=&quot;https://2016.pygotham.org/&quot;&gt;PyGotham 2016&lt;/a&gt;
in New York City in July 2016.&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/pygotham_2016/pygotham.jpg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;p&gt;The conference started on 16th July, we
(&lt;a href=&quot;https://github.com/leosartaj&quot;&gt;Sartaj&lt;/a&gt; and I) were at &lt;a href=&quot;http://scipy2016.scipy.org&quot;&gt;SciPy&lt;/a&gt;
at Austin on 15th July, We took the flight on 16th morning and reached at the conference place
in the afternoon. We had to skip sprints at &lt;a href=&quot;http://scipy2016.scipy.org&quot;&gt;SciPy&lt;/a&gt;. Interestingly
the venue for the conference was United Nations Conference building in Manhattan. We stayed at
Astoria in Queens at an Airbnb apartment.&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/pygotham_2016/venue-pygotham.jpg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Day 1&lt;/h2&gt;

&lt;p&gt;I missed a major portion of Day 1 as I reached late, though fortunately I was
able to attend Keynote which was schedule at the end of the day, thanks to the
organisers! for such smart scheduling, which makes a lot of sense.
I met a lot people there, mostly from New York, from various domains. I also
met &lt;a href=&quot;https://twitter.com/dontusethiscode&quot;&gt;James Powell&lt;/a&gt; there, whom I met at
&lt;a href=&quot;http://scipy2016.scipy.org&quot;&gt;SciPy&lt;/a&gt;. as well, he introduced me to a lot
of people at PyGotham. The keynote was given by &lt;a href=&quot;https://twitter.com/ewa_jodlowska&quot;&gt;Ewa Jodlowska&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/pygotham_2016/ewa-pygotham.jpg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;p&gt;She is a Director of Operations for the &lt;a href=&quot;https://www.python.org/psf/&quot;&gt;Python Software Foundation&lt;/a&gt;.
&lt;a href=&quot;https://twitter.com/ewa_jodlowska&quot;&gt;Ewa&lt;/a&gt;, talked about the role of PSF in financially
supporting the Python community. I was glad to see the kind of transparency PSF have.
She showed a lot of insights of the expenditure of Python Software Foundation. A lot of
financial aid for the conferences I attend comes from PSF itself! Thanks to the people
who run Python Software Foundation.&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/pygotham_2016/open-space-pygotham.jpg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Day 2&lt;/h2&gt;

&lt;p&gt;I had my talk on Day 2, after lunch. The talk was scheduled for 25 minutes and
the helper told me about various signals he would make based on the time left.
I was afraid that I may take longer than time alloted, but I spoke like a
house on fire and finished my talk in just about 15 minutes, it was the first
time, when I was asked no question! It seems I need to work on my speaking speed.
It was an important lesson to learn though. :P&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/pygotham_2016/amit-pygotham.jpg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;p&gt;The Keynote for Day 2 was given by &lt;a href=&quot;https://twitter.com/kcunning&quot;&gt;Katie Cunningham&lt;/a&gt; who is an excellent speaker
or rather teacher! She talked about how a good teacher should look like. James Powell
volunteered for being her student during the keynote. She taught the art of teaching
by Empathy, by taking an example of teaching someone how to knit. It was one of
the best keynotes I have ever seen.&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/pygotham_2016/katie-pygotham.jpg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;p&gt;Later in the evening James took me to the Dinner with Katie and all the volunteers of
PyGotham 2016. It was great to see their enthusiasm towards contributing back to the
community. It was an amazing evening spent with those awesome people. I am looking
forward to attend PyGotham again.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SciPy 2016 &#58; Journey to the West</title>
   <link href="http://0.0.0.0:4000/blog/scipy-2016"/>
   <updated>2016-08-28T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/SciPy-2016 &#58; Journey to the West</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://scipy2016.scipy.org&quot;&gt;SciPy 2016&lt;/a&gt; was held in &lt;a href=&quot;http://www.utexas.edu/&quot;&gt;University of Texas&lt;/a&gt;
at Austin like every other year. We reached &lt;a href=&quot;http://www.meetattexas.com/&quot;&gt;AT&amp;amp;T Executive Education
and Conference Center&lt;/a&gt; on the Night of 9 July after
a 30+ hour journey from New Delhi to Austin with layovers in Germany and Newark.
The conference was schedule to start on 11 July, so we had a day to fix our sleep
cycle and jet lag. We visited a couple places (Barton springs and Capitol) on 10th
July, with &lt;a href=&quot;https://github.com/aman-iitj&quot;&gt;Aman&lt;/a&gt;, &lt;a href=&quot;https://github.com/isuruf&quot;&gt;Isuru&lt;/a&gt;
who happend to be staying in adjacent rooms. &lt;a href=&quot;https://github.com/hargup&quot;&gt;Harsh&lt;/a&gt;
joined us at Capitol.In the evening we met &lt;a href=&quot;https://github.com/asmeurer&quot;&gt;Aaron&lt;/a&gt;
and &lt;a href=&quot;https://github.com/certik&quot;&gt;Ondrej&lt;/a&gt; for the first time, even though we have
worked with each other for over an year. Here is a picture of UT Tower from the window
of our room.&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/ut-austin.jpg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Day 1 &amp;amp; 2 (Tutorial)&lt;/h3&gt;

&lt;p&gt;The most important day of the conference for us, as we were supposed to deliver a tutorial
on &lt;a href=&quot;http://sympy.org&quot;&gt;SymPy&lt;/a&gt;. Here is a picture of the Tutorial room:&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/sympy-tutorial.jpg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;p&gt;The tutorial started at about 8:10 AM, due to slight delay because of projector
issues, I am still waiting for the day when I will find a projector that just
works! Anyways, the tutorial introduction was started by Aaron and Ondrej, then
we took over with notebooks. Here is the video:&lt;/p&gt;

&lt;hr&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/AqnpuGbM6-Q&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;hr&gt;

&lt;h3&gt;Day 3, 4 &amp;amp; 5 (Conference)&lt;/h3&gt;

&lt;h4&gt;Day 3&lt;/h4&gt;

&lt;p&gt;The conference started with a Keynote from &lt;a href=&quot;https://github.com/ellisonbg/altair&quot;&gt;Brian Gragner&lt;/a&gt;,
the maintainer of &lt;a href=&quot;https://github.com/jupyter/jupyter&quot;&gt;Jupyter Project&lt;/a&gt;. I was very
excited for this keynote as I could recall a &lt;a href=&quot;https://www.youtube.com/watch?v=YCxQI4C34j8&quot;&gt;lightning talk&lt;/a&gt;
from him in the last SciPy, which was pretty good. In this keynote he talked about various
aspects of the project jupyter and introduced the new project he was working on named
&lt;a href=&quot;https://github.com/ellisonbg/altair&quot;&gt;altair&lt;/a&gt;, a Declarative statistical visualization
library for Python.&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/scipy-day1.jpg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;h4&gt;Day 4&lt;/h4&gt;

&lt;p&gt;The Day 2 started with a Sponsor and Scholarship Recipient Breakfast, where I met some of the other people
who were awarded Financial Aid and also who were in the panel of selecting Finacial aid recipients. I
am thankful to Eric Ma and Scott Collis for awarding me the financial aid for attending the conference.
Later on the Day, we had the keynote by Andreas Kl√∂ckner, He works on high-order numerical methods for 
the simulation of wave problems as well as issues in high-performance scientific computing that relate
to bringing these methods to life on large-scale parallel computers. Aaron also had his talk on the same
day. He introduced the code generation abilities of SymPy. Code generation is useful across a wide
variety of domains. SymPy supports generating code for C, Fortran, Matlab/Octave, Python, Julia,
Javascript, LLVM, Rust, and Theano. The code generation system is easily extensible to any language.&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/aaron-codegen.jpg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;h4&gt;Day 5&lt;/h4&gt;

&lt;p&gt;The Day 5 was our last day of the conference, as I had to leave for an another
conference in the NewYork (&lt;a href=&quot;https://2016.pygotham.org/&quot;&gt;PyGotham&lt;/a&gt;), the next
day. It started with the Keynote by Hanna Wallach. She is a Senior Researcher
at Microsoft Research New York City and an Adjunct Associate Professor in
the College of Information and Computer Sciences at the University of Massachusetts Amherst.
She talked about Machine Learning for Social Science. In the evening, Ondrej and Isuru had
a talk, where they introduced SymEngine. Ondrej talked about the internals and interface of
SymEngine and then Isuru showed some interesting benchmarks of comparing SymEngine with other
computer Algebra Systems like Mathematica, Maple, GiNaC and even SymPy.&lt;/p&gt;

&lt;h4&gt;Concluding Note&lt;/h4&gt;

&lt;p&gt;SciPy was an amazing conference, I was overwhelmed by the quality of talks and workshops.
The best part was meeting all the awesome people behind some of the greatest projects
like SciPy, Numpy, pandas, matplotlib, etc. There is always so much to learn from conferences
like these. I also met Jill Cowan, who I think is the one person, without whom the conference
would not have been possible, she manages a lot of things at once, which is incredibly
hard to do. I also met Prabhu Ramachandran, who was the co-chair of the conference, he is
an extremely knowledgeble guy, I had the privilege of meeting him twice, once in Pune and
then in SciPy itself. Thanks to Enthought for putting up the energy to organize such an
huge conference. Looking forward to next SciPy!&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/sympy-team.jpg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Talk on Introducing Metaclasses at PyDelhi Meetup</title>
   <link href="http://0.0.0.0:4000/blog/talk-python-metaclasses-pydelhi-meetup"/>
   <updated>2016-05-29T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/Talk on Introducing Metaclasses at PyDelhi Meetup</id>
   <content type="html">&lt;p&gt;Hey! I gave a talk on Python Metaclasses yesterday at &lt;a href=&quot;http://pydelhi.org&quot;&gt;PyDelhi&lt;/a&gt; &lt;a href=&quot;http://www.meetup.com/pydelhi/events/226342855/&quot;&gt;Meetup&lt;/a&gt; at Lyxel labs, Gurgaon .&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Interested in learning Metaclasses? Come to &lt;a href=&quot;https://twitter.com/hashtag/PyDelhi?src=hash&quot;&gt;#PyDelhi&lt;/a&gt; meetup tomorrow to watch &lt;a href=&quot;https://twitter.com/iaktech&quot;&gt;@iaktech&lt;/a&gt; introducing metaclasses at &lt;a href=&quot;https://twitter.com/hashtag/LyxelLabs?src=hash&quot;&gt;#LyxelLabs&lt;/a&gt;, Gurgaon.&lt;/p&gt;&amp;mdash; PyDelhi (@PyDelhi) &lt;a href=&quot;https://twitter.com/PyDelhi/status/736067744039198721&quot;&gt;May 27, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;In order to develop an intuition to understand metaclasses in python, Let&amp;#39;s see it in this way: &amp;quot;&lt;strong&gt;&lt;em&gt;Everything is an object in Python&lt;/em&gt;&lt;/strong&gt;&amp;quot;, So is a class! and every object is created by a class, of course:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo_object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The class which creates the &lt;code&gt;foo_object&lt;/code&gt; is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s what we expected, &lt;code&gt;Foo&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Now, as I said earlier, every class is also an object, So is &lt;code&gt;Foo&lt;/code&gt;, now lets see which class creates the class &lt;code&gt;Foo&lt;/code&gt; itself:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;type&lt;/code&gt;! Yes, the &lt;code&gt;type&lt;/code&gt; class creates the &lt;code&gt;Foo&lt;/code&gt; class and that&amp;#39;s what called as a Metaclass. Metaclasses are the secret sauce which creates classes! &lt;code&gt;type&lt;/code&gt; is the default metaclass in Python. To dive more into Metaclasses, have a look at the presentation slides of
my talk.&lt;/p&gt;

&lt;iframe src=&quot;//slides.com/aktech/introducing-metaclasses-in-python/embed&quot; width=&quot;700&quot; height=&quot;600&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt; : Interested in tasting bit more of Python? Come to PyDelhi &lt;a href=&quot;http://www.meetup.com/pydelhi/&quot;&gt;Meetups&lt;/a&gt;!
or if you would like to taste lot of python, then you should come to &lt;a href=&quot;https://in.pycon.org/2016/&quot;&gt;PyCon India 2016&lt;/a&gt;, its a premier conference in India on using and developing the Python programming language &amp;amp; is conducted annually by the Python developer community. It attracts the best Python programmers from across the country and abroad.&lt;/p&gt;

&lt;p&gt;If you missed my talk or attended and liked it, then you should definitely have a look at my &lt;a href=&quot;https://in.pycon.org/cfp/2016/proposals/introducing-metaclasses%7Edw0Je/&quot;&gt;proposal&lt;/a&gt; for this talk at PyCon India 2016 or you can submit your own proposal &lt;a href=&quot;https://in.pycon.org/cfp/2016/proposals/&quot;&gt;here&lt;/a&gt;, the call for proposals is open ;)&lt;/p&gt;

&lt;p&gt;Here is a picture of an another talk by Peeyush Aggarwal &lt;a href=&quot;https://twitter.com/dhuadaar&quot;&gt;(@dhuadaar)&lt;/a&gt; on NLP.&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/dhuadaar.jpg&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;p&gt;See you in the next meetup :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Talk on Python MRO at PyDelhi Meetup</title>
   <link href="http://0.0.0.0:4000/blog/talk-python-mro-pydelhi-meetup"/>
   <updated>2016-04-02T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/Talk on Python MRO at PyDelhi Meetup</id>
   <content type="html">&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Demystifying &lt;a href=&quot;https://twitter.com/hashtag/Python?src=hash&quot;&gt;#Python&lt;/a&gt; MRO at &lt;a href=&quot;https://twitter.com/PyDelhi&quot;&gt;@PyDelhi&lt;/a&gt; meetup tomorrow. See you there at Ramanujan College, Delhi.&lt;/p&gt;&amp;mdash; AMiT Kumar (@iaktech) &lt;a href=&quot;https://twitter.com/iaktech/status/715933679676162049&quot;&gt;April 1, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Hi there! Today I gave a talk on Python MRO at &lt;a href=&quot;http://pydelhi.org&quot;&gt;PyDelhi&lt;/a&gt; &lt;a href=&quot;http://www.meetup.com/pydelhi/events/226049223/&quot;&gt;Meetup&lt;/a&gt; at &lt;a href=&quot;http://www.ramanujancollege.ac.in/index.php&quot;&gt;Ramanujan College&lt;/a&gt;, Delhi. MRO stands for method resolution order &lt;em&gt;which defines the &amp;quot;class search path&amp;quot; used by Python to search for the right method to use in classes having multi-inheritance&lt;/em&gt;. Below is an example&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;whoami&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;I am A&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;whoami&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;I am B&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;whoami&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;I am C&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;whoami&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To get the output of above example Python has a predefined algorithm called as method resolution order, which defines the order in which python would search for the method &lt;code&gt;whoami&lt;/code&gt; in the classes from which D inherits. To understand more about the working of mro see the &lt;a href=&quot;http://slides.com/aktech/python-mro/&quot;&gt;slides&lt;/a&gt; of talk.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;. &lt;a href=&quot;https://twitter.com/iaktech&quot;&gt;@iaktech&lt;/a&gt; demystifying python&amp;#39;s MRO &lt;a href=&quot;https://twitter.com/PyDelhi&quot;&gt;@PyDelhi&lt;/a&gt; meetup in Ramanujan college. &lt;a href=&quot;https://t.co/VJNuiyPQFv&quot;&gt;pic.twitter.com/VJNuiyPQFv&lt;/a&gt;&lt;/p&gt;&amp;mdash; Anuvrat Parashar (@bhanuvrat) &lt;a href=&quot;https://twitter.com/bhanuvrat/status/716190054750625792&quot;&gt;April 2, 2016&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h4&gt;Motivation for the talk&lt;/h4&gt;

&lt;p&gt;The motivation behind this talk is my failure to answer some simple mro based question in an interview with a bangalore based startup a month ago. I realized that its one of the basic language features which every Python programmer should be aware of &amp;amp; teaching something is probably the best way to learn something, so is delivering a talk! It&amp;#39;s well said by Albert Einstein:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you can&amp;#39;t explain it simply, you don&amp;#39;t understand it well enough.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is always a wonderful experience delivering a talk at PyDelhi Meetup or at any conference, I plan to do more of it in future. I always say this &amp;amp; would say it again, if you like Python or interested in learning then you must attend PyDelhi Meetups. See you on the next meetup ;)&lt;/p&gt;

&lt;p&gt;Feel free to reach out to me for any feedbacks or query regarding anything at me [at] iamit [dot] in.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SymPy Workshop at FOSSASIA 2016, Singapore</title>
   <link href="http://0.0.0.0:4000/blog/sympy-workshop-fossasia-2016"/>
   <updated>2016-03-26T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/SymPy Workshop at FOSSASIA 2016, Singapore</id>
   <content type="html">&lt;p&gt;Hi there! Last week I went to &lt;a href=&quot;https://en.wikipedia.org/wiki/Singapore&quot;&gt;Singapore&lt;/a&gt; for &lt;a href=&quot;http://2016.fossasia.org/&quot;&gt;FOSSASIA&lt;/a&gt; Open Tech Summit  2016. I conducted a Worskhop on &lt;a href=&quot;http://sympy.org&quot;&gt;SymPy&lt;/a&gt; and assisted the &lt;a href=&quot;http://pydy.org&quot;&gt;PyDy&lt;/a&gt; Workshop in Python track hosted by &lt;a href=&quot;https://kushaldas.in/&quot;&gt;Kushal Das&lt;/a&gt;. This blog post accounts to my experience as a speaker, as a attendee at FOSSASIA and as a traveler to Singapore.&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;About FOSSASIA&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/fossasia.png&quot; width = &quot;200&quot;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;FOSSASIA is the premier Free and Open Source technology event in Asia for developers, start-ups, and contributors. Projects at FOSSASIA range from open hardware, to design, graphics and software. FOSSASIA was established in 2009. Previous events took place in Cambodia and Vietnam.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As the name suggests its one of the largest tech conferences in Asia and my expectations were pretty high from this conference and moreover It was my first international conference. I witnessed lots of amazing people in the conference and interacted with a few as well. This is how it started: &lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/harish-fossasia.jpg&quot;  width = &quot;400&quot;&gt;&lt;/p&gt;

&lt;h2&gt;The SymPy/PyDy Workshop&lt;/h2&gt;

&lt;p&gt;Community is more important than Code @ Singapore Science Center Level 3, Pauling Lab
&lt;img align=&quot;center&quot; src=&quot;/assets/sympy-zen.jpg&quot; width = &quot;400&quot;&gt;&lt;/p&gt;

&lt;p&gt;The SymPy and PyDy workshop was scheduled on 20th March at 1:00 - 2:00 PM (PyDy) and 2:00 - 4:00 PM (SymPy). &lt;a href=&quot;http://www.moorepants.info/&quot;&gt;Jason&lt;/a&gt; suggested to conduct the SymPy workshop first since PyDy uses SymPy and it would be easier for people to learn SymPy first and then PyDy, but since the &lt;a href=&quot;http://2016.fossasia.org/schedule/&quot;&gt;schedule&lt;/a&gt; was already published, It was not possible to reschedule the workshops, so we had to continue with PyDy first.
&lt;a href=&quot;https://github.com/sahilshekhawat&quot;&gt;Sahil&lt;/a&gt; started the PyDy workshop at 1:00 PM, though we had to spend a lot of time installing Anaconda to everyone&amp;#39;s systems by creating a local server and distributing flash drives as most of the people didn&amp;#39;t had Anaconda or Canopy installed. This has been the problem for almost all the workshops I have conducted in the past. It seems I need to invent an efficient way to do this faster in future as we spent 30-40 odd minutes in installation. &lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/sympy-fossasia.jpg&quot; width = &quot;400&quot;&gt;&lt;/p&gt;

&lt;p&gt;Fortunately &lt;a href=&quot;https://github.com/sahilshekhawat&quot;&gt;Sahil&lt;/a&gt; finished his presentation at around 2:15 PM. Then I took over for SymPy workshop, I started with the basic introduction to SymPy, the slides can be found &lt;a href=&quot;http://slides.com/aktech/sympy&quot;&gt;here&lt;/a&gt;. Then I jumped to IPython notebook exercises to demonstrate more of SymPy. People were amazed by the capabilities of this amazing piece of software. The most beautiful feature they liked was printing and integration. The workshop went pretty well except for the glitches in the HDMI port of my laptop (probably, its the right time to get a new laptop). Here are some SymPy stickers for you, if you missed there.  &lt;/br&gt;&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/sympy-sticker-fossasia.jpg&quot;  width = &quot;400&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Singapore was Fun ;)&lt;/h2&gt;

&lt;p&gt;Visiting Singapore has been a great experience, the culture is a mix of &lt;a href=&quot;https://en.wikipedia.org/wiki/Malaysian&quot;&gt;Malaysian&lt;/a&gt;, Indian and native Singaporean. The City is well connected with &lt;a href=&quot;https://en.wikipedia.org/wiki/Mass_Rapid_Transit_(Singapore)&quot;&gt;MRT/SMRT&lt;/a&gt; (Metro and Buses). It&amp;#39;s quite easy get anywhere around the city. People here are very helpful and nice. I didn&amp;#39;t faced any problems throughout my stay there. I spent most of my time near &lt;a href=&quot;https://en.wikipedia.org/wiki/Science_Centre_Singapore&quot;&gt;Science Center&lt;/a&gt;, China Town and Little India. There were lot of people from India and particularly from Delhi and three from my University. It was awesome time spent with geeks all around. Tagging some of them &lt;a href=&quot;http://devmaany.co/&quot;&gt;Mayank&lt;/a&gt;, &lt;a href=&quot;http://www.ishankhanna.in/&quot;&gt;Ishaan&lt;/a&gt;, &lt;a href=&quot;http://omerjerk.in/&quot;&gt;Umair&lt;/a&gt;, &lt;a href=&quot;https://github.com/jig08&quot;&gt;Jigyasa&lt;/a&gt;, &lt;a href=&quot;http://iyask.me/&quot;&gt;Yask&lt;/a&gt;, &lt;a href=&quot;http://garvitdelhi.blogspot.in/&quot;&gt;Garvit&lt;/a&gt;, &lt;a href=&quot;http://home.iiitd.edu.in/%7Emanan13056/&quot;&gt;Manan&lt;/a&gt;, sorry If I missed someone. Here is a pic of the last day of the conference. &lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;center&quot; src=&quot;/assets/fossasia-all.jpg&quot; width = &quot;400&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Thank you!&lt;/h2&gt;

&lt;p&gt;Thank you FOSSASIA Organizing Team, Hong Phuc Dang for inviting me to be part of this awesome FOSS community.
I would not have been able to attend the conference without the generous financial support from SymPy, Thank you &lt;a href=&quot;http://www.ondrejcertik.com/&quot;&gt;Ondrej Certik&lt;/a&gt;, &lt;a href=&quot;http://asmeurer.github.io/blog/&quot;&gt;Aaron Meurer&lt;/a&gt; &amp;amp; SymPy contributors.&lt;/p&gt;

&lt;h3&gt;Good Bye!&lt;/h3&gt;

&lt;p&gt;Good bye! everyone, see you on my next blog post, meanwhile you can have a look at a Picture of me doing back flip at Sentosa ;)
&lt;img align=&quot;center&quot; src=&quot;/assets/amit-backflip.gif&quot;&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SymPy Workshop at PyDelhi Meetup</title>
   <link href="http://0.0.0.0:4000/blog/sympy-workshop-pydelhi-meetup"/>
   <updated>2016-02-07T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/SymPy Workshop at PyDelhi Meetup</id>
   <content type="html">&lt;p&gt;Hi there! It&amp;#39;s been sometime now since my last blog post, It&amp;#39;s probably the right time to write one now. Yesterday, I gave a talk on SymPy at Python Delhi User group Meetup at &lt;a href=&quot;https://maps.google.com/maps?f=q&amp;hl=en&amp;q=29%2C+Rajpur+Road%2C+Delhi%2C+in&quot;&gt;CSDS&lt;/a&gt;, New Delhi. Things never go the way you want, an hour was wasted in just setting up Anaconda on everyone&amp;#39;s system, eventually I had to cut on the material I could demonstrate, though It was nice to see that people were very enthusiatic about SymPy, they actively solved excercises. It was fun interacting with everyone.&lt;/p&gt;

&lt;p&gt;Here is a Pic of the Seminar room at CSDS:
&lt;img align=&quot;center&quot; src=&quot;/assets/sympy-workshop.jpg&quot;&gt;&lt;/p&gt;

&lt;p&gt;I should also admit that, I have increased my appetite for attending conferences and meetups, these days. In the last 4 months I have attended 3 Meetups (PyDelhi Meetup) and 1 Conference (PyCon India 2015). I think this is one of the best things I have done in last few years &amp;amp; I would recommend anyone with a slight interest in Python either Beginner or Expert should attend &lt;a href=&quot;http://www.pydelhi.org&quot;&gt;PyDelhi&lt;/a&gt; &lt;a href=&quot;http://www.meetup.com/pydelhi/events/&quot;&gt;Meetups&lt;/a&gt;. Looking forward to more such meetups and conferences.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/sympy-sticker.jpg&quot;&gt;&lt;/p&gt;

&lt;p&gt;I gave SymPy stickers to everyone who solved atleast one excercise (Since, I didn&amp;#39;t had enough stickers).&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GSoC &#58; Throughout in SymPy &#35; Wrap Up</title>
   <link href="http://0.0.0.0:4000/blog/GSoC-wrap-up"/>
   <updated>2015-08-28T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/GSoC &#58; Throughout in SymPy &#35; Wrap Up</id>
   <content type="html">&lt;p&gt;Hi! I am Amit Kumar (&lt;a href=&quot;http://www.github.com/aktech&quot;&gt;&lt;strong&gt;@aktech&lt;/strong&gt;&lt;/a&gt;), a final year undergraduate student of Mathematics &amp;amp; Computing at Delhi Technological University. This post summarizes my experience working on GSoC Project on Improving Solvers in SymPy.&lt;/p&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I first stumbled upon SymPy last year, while looking for some Open Source Computer Algebra Systems to contribute. I didn&amp;#39;t had any Open Source experience by then, So SymPy was an Ideal Choice for getting into the beautiful world of Open Source. I wasn&amp;#39;t even Proficient in Python so at first it was little difficult for me, but Thanks! to the beauty of the language itself, which makes anyone comfortable with it in no time. Soon, I decided to participate into Google Summer of Code under SymPy. Though at this point of time, I didn&amp;#39;t had decided about the project, I would like to work in Summers. &lt;/p&gt;

&lt;h5&gt;First Contribution&lt;/h5&gt;

&lt;p&gt;I started learning the codebase &amp;amp; made my first contribution by Fixing an EasyToFix bug in &lt;code&gt;solvers.py&lt;/code&gt; through the PR &lt;a href=&quot;https://github.com/sympy/sympy/pull/8647&quot;&gt;#8647&lt;/a&gt;, Thanks to &lt;a href=&quot;&quot;&gt;@smichr&lt;/a&gt; for helping me making my first ever open source contribution. After my first PR, I started looking for more things to work and improve upon and I started commiting quite often. During this period I learnt the basics of Git, which is one of the most important tools for contributing to Open Source.&lt;/p&gt;

&lt;h2&gt;Project Ideas&lt;/h2&gt;

&lt;p&gt;When I got a bit comfortable with the basics of SymPy &amp;amp; contributing to open source in general, I decided to chose an area (module) to concentrate on. The modules I was interested in, were Solvers and Integrals, I was literally amazed by the capability of a CAS to integrate and solve equations. I decided to work on one of these in the summers. There was already some work done on the Integrals module in 2013, which was yet to be Merged. I wasn&amp;#39;t well versed about the Manuel Bronsteins works on Methods of Integration in a Computer Algebra System, so I was little skeptical about working on Integrals. The Solvers module attracted me due it&amp;#39;s awesome capabilities, I found it one of the most useful features of any Computer Algebra Systems, So I finally decided to work on Solvers Module.&lt;/p&gt;

&lt;h2&gt;Coding&lt;/h2&gt;

&lt;p&gt;I was finally accepted to work on Solvers this summer. I had my exams during the community bonding period, So I started almost in the first week of Coding Period. I made a detailed timeline of my work in summers, but through my experience I can say that&amp;#39;s seldom useful. Since, you never know what may come out in between you and your schedule. As an instance PR &lt;a href=&quot;https://github.com/sympy/sympy/pull/9540&quot;&gt;#9540&lt;/a&gt;, was a stumbling block in lot of my work, which was necessary to fix for proceeding ahead.&lt;/p&gt;

&lt;h4&gt;Phase I (Before Mid Terms)&lt;/h4&gt;

&lt;p&gt;When coding period commenced, I started implementing the &lt;code&gt;linsolve&lt;/code&gt;, the linear system solver which is tolerant to different input forms &amp;amp; can solve almost all forms of linear systems. At the start I got lot of reviews from Jason and Harsh, regarding improvement of the function. One of the most important thing I learnt which they focused on was Test Driven Development, they suggested me to write extensive tests before implementing the logic, which helps in reducing the problems in visualizing the final implementaion of the function and avoids API changes.&lt;/p&gt;

&lt;p&gt;After &lt;code&gt;linsolve&lt;/code&gt; I implemented &lt;code&gt;ComplexPlane&lt;/code&gt;, which is basically Complex Sets. It is useful for representing infinite solutions in argand plane. While implementing this I learnt that chosing the right API is one of the most important factors while designing aa important functionality. To know more about it, see my blog post &lt;a href=&quot;http://iamit.in/blog/GSoC-week-3/&quot;&gt;here&lt;/a&gt;. During this period I also worked on fixing Intersection&amp;#39;s of FiniteSet with symbolic elements, which was a stumbling block.&lt;/p&gt;

&lt;h4&gt;Phase II (After Mid Terms)&lt;/h4&gt;

&lt;p&gt;After successfully passing the Mid Terms, I started working more on robustness of &lt;code&gt;solveset&lt;/code&gt;, Thanks to @hargup for pointing out the motivation for this work. The idea is to tell the user about the domain of solution returned. Simplest motivation was the solution of the equation &lt;code&gt;|x| - n&lt;/code&gt;, for more info see my blog post &lt;a href=&quot;http://iamit.in/blog/GSoC-week-7/&quot;&gt;here&lt;/a&gt;. I also worked on various trivial and non trivial bugs which were more or less blocking my work. &lt;/p&gt;

&lt;p&gt;Then I started replacing &lt;code&gt;solve&lt;/code&gt; with &lt;code&gt;solveset&lt;/code&gt; in the codebase, the idea was to make a smooth transition between &lt;code&gt;solve&lt;/code&gt; and &lt;code&gt;solveset&lt;/code&gt;, while doing this Jason pointed out that I should not remove &lt;code&gt;solve&lt;/code&gt; tests, which can make &lt;code&gt;solve&lt;/code&gt; vunerable to break, So I reverted removing of solve tests. Later we decided to add &lt;code&gt;domain&lt;/code&gt; argument to &lt;code&gt;solveset&lt;/code&gt;, which would help the user in easily dictating to solveset about what solutions they are interested in, thanks to @shivamvats for doing this in a PR.
After the decision of adding &lt;code&gt;domain&lt;/code&gt; argument, Harsh figured out that, as of now &lt;code&gt;solveset&lt;/code&gt; is vunerable to API changes, so it&amp;#39;s not the right time to replace solve with solveset, so we decided to halt this work, as a result I closed my several PR&amp;#39;s unmerged. &lt;/p&gt;

&lt;p&gt;I also worked on Implementing Differential Calculus Method such as &lt;code&gt;is_increasing&lt;/code&gt; etc, which is also Merged now. Meanwhile I have been working on documenting &lt;code&gt;solveset&lt;/code&gt;, because a lot of people don&amp;#39;t know what we are doing &amp;amp; why we are doing, so It&amp;#39;s very important to answer all those subtle questions which may come up in there mind, So we decided to create a FAQ style documentation of &lt;code&gt;solveset&lt;/code&gt; see PR &lt;a href=&quot;https://github.com/sympy/sympy/pull/9500&quot;&gt;#9500&lt;/a&gt;. This is almost done, some polishing is needed. It would be Merged soon.&lt;/p&gt;

&lt;p&gt;During this period apart from my work, there are some other works as well which is worth mentioning, one of them is &lt;code&gt;ConditionSet&lt;/code&gt; by Harsh which serves the purpose of unevaluated solve object and even much more than that for our future endeavours with &lt;code&gt;solveset&lt;/code&gt;. Others being &lt;code&gt;codomain&lt;/code&gt; &amp;amp; &lt;code&gt;not_empty&lt;/code&gt; by Gaurav &lt;a href=&quot;http://github.com/gxyd&quot;&gt;@gxyd&lt;/a&gt; which are also important additions to SymPy.&lt;/p&gt;

&lt;h2&gt;Advice&lt;/h2&gt;

&lt;p&gt;TODO: Probably, this will need a comprehensive post, I would write soon.&lt;/p&gt;

&lt;h2&gt;Future Plans&lt;/h2&gt;

&lt;p&gt;Recently Harsh came up with an idea of tree based solver. Since now &lt;code&gt;ConditionSet&lt;/code&gt; has been introduced, the solving of equations can be seen as set transformation, We can do the following things to solve equations (abstract View):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apply Various Set Transformations on the given Set.&lt;/li&gt;
&lt;li&gt;Define a Metric of the usability or define a notion of better solution over others.&lt;/li&gt;
&lt;li&gt;Different Transformation would be the nodes of the tree.&lt;/li&gt;
&lt;li&gt;Suitable searching techniques could be applied to get the best solution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more info see mailing list thread &lt;a href=&quot;https://groups.google.com/forum/#!topic/sympy/-SIbX0AFL3Q&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a part of this I worked on implementing a general decomposition function &lt;code&gt;decompogen&lt;/code&gt; in PR &lt;a href=&quot;https://github.com/sympy/sympy/pull/9831&quot;&gt;#9831&lt;/a&gt;, It&amp;#39;s almost done, will be merged soon.&lt;/p&gt;

&lt;p&gt;I plan for a long term association with SymPy, I take the full responsibilty of my code. I will try to contribute as much as I can particularly in sets and solvers module.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;On a concluding note, I must say that getting the opportunity to work on SymPy this summer has been one of the best things that could happen to me. Thanks to Harsh for helping me all my endeavour, also for being one of the best mentors I could get. I would like to thank Sean as well who from his busy schedule took up the time to attend meetings, hangouts and for doing code reviews. Also thanks to Chris Smith who is the most gentle and helpful person I have ever seen, he is one of the reasons I started contributing to SymPy.
Thanks to Aaron, Ondrej, and last but not the least my fellow GSoCer&amp;#39;s at SymPy &lt;a href=&quot;http://github.com/leosartaj&quot;&gt;leosartaj&lt;/a&gt;, &lt;a href=&quot;http://github.com/debugger22&quot;&gt;debugger22&lt;/a&gt;, &lt;a href=&quot;http://github.com/sumith1896&quot;&gt;sumith1896&lt;/a&gt;, &lt;a href=&quot;http://github.com/shivamvats&quot;&gt;shivamvats&lt;/a&gt;, &lt;a href=&quot;https://github.com/abinashmeher999&quot;&gt;abinashmeher999&lt;/a&gt;. Special Thanks to whole SymPy team and Community for a wonderful collaboration experience. Kudos!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GSoC &#58; This week in SymPy &#35;10 &amp; &#35;11</title>
   <link href="http://0.0.0.0:4000/blog/GSoC-week-10-11"/>
   <updated>2015-08-11T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/GSoC &#58; This week in SymPy &#35;10 &#38;11</id>
   <content type="html">&lt;p&gt;Hi there! It&amp;#39;s been 11 weeks into &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Summer_of_Code&quot;&gt;GSoC&lt;/a&gt; 
and we have reached into the last week before the soft deadline. Here is the Progress so far.&lt;/p&gt;

&lt;h3&gt;&amp;nbsp; &lt;strong&gt;Progress of Week 10 &amp;amp; 11&lt;/strong&gt; &lt;img style=&quot;float: left&quot; src=&quot;/assets/gsoc/pr.png&quot;&gt;&lt;/h3&gt;

&lt;p&gt;&lt;/br&gt;
Last couple of weeks, I worked mainly on the Documentation of the solveset module. It&amp;#39;s very important to let others know what we are doing and why we are doing, so this &lt;a href=&quot;http://github.com/sympy/sympy/pull/9500&quot;&gt;PR #9500&lt;/a&gt; is an effort to accomplish that.
Here are some of the important questions, I have tried to answer in the &lt;a href=&quot;http://github.com/sympy/sympy/pull/9500&quot;&gt;PR #9500&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;:check: What was the need of a new solvers module? &lt;/br&gt;
 :check: Why do we use sets as an output type? &lt;/br&gt;
 :check: What is this domain argument about? &lt;/br&gt;
 :check: What will you do with the old solve? &lt;/br&gt;
 :check: What are the general design principles behind the development of solveset? &lt;/br&gt;
 :check: What are the general methods employed by solveset to solve an equation? &lt;/br&gt;
 :check: How do we manipulate and return an infinite solutions? &lt;/br&gt;
 :check: How does solveset ensures that it is not returning any wrong solution? &lt;/br&gt;&lt;/p&gt;

&lt;p&gt;There is still some polishing required in this as suggested by &lt;a href=&quot;http://github.com/hargup&quot;&gt;@hargup&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;Linsolve Docs&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;I completed the documentation PR for &lt;code&gt;linsolve&lt;/code&gt;. See &lt;a href=&quot;https://github.com/sympy/sympy/pull/9587&quot;&gt;PR #9587&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;&lt;strong&gt;Differential Calculus Methods&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;I have also started working on the differential calculus methods as mentioned in my proposal &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2015-Application-AMiT-Kumar--Solvers-:-Extending-Solveset#week-12&quot;&gt;here&lt;/a&gt;.
See &lt;a href=&quot;https://github.com/aktech/sympy/tree/diff-cal&quot;&gt;diff-cal&lt;/a&gt; branch.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;from &lt;strong&gt;future&lt;/strong&gt; import plan&lt;/strong&gt;  Week #12:&lt;/h3&gt;

&lt;p&gt;This week I plan to finish up all the pending work and wrap up the project and get &lt;a href=&quot;http://github.com/sympy/sympy/pull/9500&quot;&gt;PR #9500&lt;/a&gt; Merged. &lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;$ git log&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/opr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9500&quot;&gt;PR #9500&lt;/a&gt; :  Documenting &lt;code&gt;solveset&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/mpr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9587&quot;&gt;PR #9587&lt;/a&gt; : Add Linsolve Docs&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
That&amp;#39;s all for now, looking forward for week #12. :grinning:&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GSoC &#58; This week in SymPy &#35;9</title>
   <link href="http://0.0.0.0:4000/blog/GSoC-week-9"/>
   <updated>2015-07-28T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/GSoC &#58; This week in SymPy &#35;9</id>
   <content type="html">&lt;p&gt;Hi there! It&amp;#39;s been nine weeks into &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Summer_of_Code&quot;&gt;GSoC&lt;/a&gt;
. Here is the Progress for this week.&lt;/p&gt;

&lt;h3&gt;&amp;nbsp; &lt;strong&gt;Progress of Week 9&lt;/strong&gt; &lt;img style=&quot;float: left&quot; src=&quot;/assets/gsoc/pr.png&quot;&gt;&lt;/h3&gt;

&lt;p&gt;&lt;/br&gt;
This week I worked on Replacing &lt;code&gt;solve&lt;/code&gt; with &lt;code&gt;solveset&lt;/code&gt; or &lt;code&gt;linsolve&lt;/code&gt; in the codebase:
Here are the modules, I covered, as of now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/9740&quot;&gt;diffgeom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/9718&quot;&gt;calculus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/9724&quot;&gt;core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/9743&quot;&gt;functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/9744&quot;&gt;galgebra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/9708&quot;&gt;geometry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/9745&quot;&gt;ntheory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/9738&quot;&gt;simplify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/9717&quot;&gt;series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/9716&quot;&gt;sets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/9710&quot;&gt;stats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;github.com/moorepants&quot;&gt;@moorepants&lt;/a&gt; pointed out that I should not change old &lt;code&gt;solve&lt;/code&gt;tests, since people may break an untested code, this argument is valid, so I have added equivalent tests for &lt;code&gt;solveset&lt;/code&gt;, where it is competent with &lt;code&gt;solve&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are some untested code in codebase as well, where &lt;code&gt;solve&lt;/code&gt; is used, for those cases replacing has not been done, as the tests would pass anyway, since those lines are not tested. So I have added a TODO for those instances, to replace with &lt;code&gt;solveset&lt;/code&gt;, when those lines are tested.&lt;/p&gt;

&lt;h4&gt;Other Work&lt;/h4&gt;

&lt;p&gt;I also changed the output of &lt;code&gt;linsolve&lt;/code&gt; when no solution are returned, earlier it throwed &lt;code&gt;ValueError&lt;/code&gt; &amp;amp; now it returns an &lt;code&gt;EmptySet()&lt;/code&gt;, which is consistent with rest of the &lt;code&gt;solveset&lt;/code&gt;. See &lt;a href=&quot;https://github.com/sympy/sympy/pull/9726&quot;&gt;PR #9726&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;from &lt;strong&gt;future&lt;/strong&gt; import plan&lt;/strong&gt;  Week #10:&lt;/h3&gt;

&lt;p&gt;This week I plan to Merge my pending PR&amp;#39;s on replacing old &lt;code&gt;solve&lt;/code&gt; in the code base with &lt;code&gt;solveset&lt;/code&gt;, and work on Documentation &amp;amp; &lt;code&gt;lambertw&lt;/code&gt; solver.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;$ git log&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/mpr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9726&quot;&gt;PR #9726&lt;/a&gt; : Return EmptySet() if there are no solution to linear system &lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/mpr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9724&quot;&gt;PR #9724&lt;/a&gt; : Replace solve with solveset in core&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/mpr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9717&quot;&gt;PR #9717&lt;/a&gt; : Replace solve with solveset in sympy.calculus&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/mpr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9716&quot;&gt;PR #9716&lt;/a&gt; : Use solveset instead of solve in sympy.sets&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/mpr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9717&quot;&gt;PR #9717&lt;/a&gt; : Replace solve with solveset in &lt;code&gt;sympy.series&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/mpr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9710&quot;&gt;PR #9710&lt;/a&gt; : Replace solve with solveset in &lt;code&gt;sympy.stats&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/mpr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9708&quot;&gt;PR #9708&lt;/a&gt; : Use solveset instead of solve in &lt;code&gt;sympy.geometry&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/opr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9587&quot;&gt;PR #9587&lt;/a&gt; : Add Linsolve Docs&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/opr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9500&quot;&gt;PR #9500&lt;/a&gt; :  Documenting &lt;code&gt;solveset&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
That&amp;#39;s all for now, looking forward for week #10. :grinning:&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GSoC &#58; This week in SymPy &#35;8</title>
   <link href="http://0.0.0.0:4000/blog/GSoC-week-8"/>
   <updated>2015-07-21T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/GSoC &#58; This week in SymPy &#35;8</id>
   <content type="html">&lt;p&gt;Hi there! It&amp;#39;s been eight weeks into &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Summer_of_Code&quot;&gt;GSoC&lt;/a&gt;
. Here is the Progress for this week.&lt;/p&gt;

&lt;h3&gt;&amp;nbsp; &lt;strong&gt;Progress of Week 8&lt;/strong&gt; &lt;img style=&quot;float: left&quot; src=&quot;/assets/gsoc/pr.png&quot;&gt;&lt;/h3&gt;

&lt;p&gt;&lt;/br&gt;
This week, my PR for making &lt;code&gt;invert_real&lt;/code&gt; more robust was Merged, along with these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/9628&quot;&gt;PR #9628&lt;/a&gt; : Make &lt;code&gt;invert_real&lt;/code&gt; more robust&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/9668&quot;&gt;PR #9668&lt;/a&gt; : Support solving for Dummy symbols in &lt;code&gt;linsolve&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/9666&quot;&gt;PR #9666&lt;/a&gt; : Equate &lt;code&gt;S.Complexes&lt;/code&gt; with &lt;code&gt;ComplexPlane(S.Reals*S.Reals)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: We renamed &lt;code&gt;S.Complex&lt;/code&gt; to &lt;code&gt;S.Complexes&lt;/code&gt;, which is analogous with &lt;code&gt;S.Reals&lt;/code&gt; as suggested by &lt;a href=&quot;https://github.com/jksuom&quot;&gt;@jksuom&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also opened &lt;a href=&quot;https://github.com/sympy/sympy/pull/9671&quot;&gt;PR #9671&lt;/a&gt; for Simplifying ComplexPlane output when ProductSet of FiniteSets are given as input: &lt;code&gt;ComplexPlane(FiniteSet(x)*FiniteSet(y))&lt;/code&gt;, It was earlier simplified to:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;ComplexPlane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It isn&amp;#39;t very useful to represent a point or discrete set of points in &lt;code&gt;ComplexPlane&lt;/code&gt; with an expression like above. So in the above PR it is now simplified as &lt;code&gt;FiniteSet&lt;/code&gt; of discrete points in &lt;code&gt;ComplexPlane&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ComplexPlane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FiniteSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FiniteSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;#39;s awaiting Merge, as of now.&lt;/p&gt;

&lt;p&gt;Now, I have started replacing &lt;code&gt;solve&lt;/code&gt; with &lt;code&gt;solveset&lt;/code&gt; and &lt;code&gt;linsolve&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;from &lt;strong&gt;future&lt;/strong&gt; import plan&lt;/strong&gt;  Week #9:&lt;/h3&gt;

&lt;p&gt;This week I plan to Merge my pending PR&amp;#39;s &amp;amp; work on replacing old &lt;code&gt;solve&lt;/code&gt; in the code base with &lt;code&gt;solveset&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;$ git log&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/opr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9710&quot;&gt;PR #9710&lt;/a&gt; : Replace solve with solveset in &lt;code&gt;sympy.stats&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/opr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9708&quot;&gt;PR #9708&lt;/a&gt; : Use solveset instead of solve in &lt;code&gt;sympy.geometry&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/opr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9671&quot;&gt;PR #9671&lt;/a&gt; : Simplify &lt;code&gt;ComplexPlane({x}*{y})&lt;/code&gt; to &lt;code&gt;FiniteSet(x + I*y)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/mpr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9668&quot;&gt;PR #9668&lt;/a&gt; : Support solving for Dummy symbols in linsolve&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/mpr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9666&quot;&gt;PR #9666&lt;/a&gt; : Equate S.Complexes with &lt;code&gt;ComplexPlane(S.Reals*S.Reals)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/mpr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9628&quot;&gt;PR #9628&lt;/a&gt; : Make invert_real more robust&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/opr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9587&quot;&gt;PR #9587&lt;/a&gt; : Add Linsolve Docs&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/opr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9500&quot;&gt;PR #9500&lt;/a&gt; :  Documenting &lt;code&gt;solveset&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
That&amp;#39;s all for now, looking forward for week #9. :grinning:&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GSoC &#58; This week in SymPy &#35;7</title>
   <link href="http://0.0.0.0:4000/blog/GSoC-week-7"/>
   <updated>2015-07-15T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/GSoC &#58; This week in SymPy &#35;7</id>
   <content type="html">&lt;p&gt;Hi there! It&amp;#39;s been seven weeks into &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Summer_of_Code&quot;&gt;GSoC&lt;/a&gt;
and second half has started now. Here is the Progress so far.&lt;/p&gt;

&lt;h3&gt;&amp;nbsp; &lt;strong&gt;Progress of Week 7&lt;/strong&gt; &lt;img style=&quot;float: left&quot; src=&quot;/assets/gsoc/pr.png&quot;&gt;&lt;/h3&gt;

&lt;p&gt;&lt;/br&gt;
This week I Opened &lt;a href=&quot;https://github.com/sympy/sympy/pull/9628&quot;&gt;#9628&lt;/a&gt;, which is basically an attempt to make &lt;code&gt;solveset&lt;/code&gt; more robust, as I mentioned in my &lt;a href=&quot;http://iamit.in/blog/GSoC-week-6/&quot;&gt;last post&lt;/a&gt;.
The idea is to tell the user about the domain of solution returned.&lt;/p&gt;

&lt;p&gt;Now, It makes sure that n is positive, in the following example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solveset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intersection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intersection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Otherwise it will return an &lt;code&gt;EmptySet()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solveset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmptySet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Earlier:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solveset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, for this to happen, we needed to make changes in the &lt;code&gt;invert_real&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g_ys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_ys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FiniteSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g_y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_ys&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_negative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_invert_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g_ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intersect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;imageset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g_ys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intersect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))),&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, we applied set operations on the invert to make it return non-EmptySet only when there is a solution.&lt;/p&gt;

&lt;h3&gt;Now For more Complex Cases:&lt;/h3&gt;

&lt;p&gt;For the following case:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;invert_real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the invert to be real, we must state that &lt;code&gt;a&lt;/code&gt; belongs to the Interval &lt;code&gt;(-oo, 2]&lt;/code&gt; otherwise it would be complex, but no set operation on &lt;code&gt;{log(-a + 2)/log(2)}&lt;/code&gt; can make the interval of &lt;code&gt;a&lt;/code&gt; to be in &lt;code&gt;(-oo, 2]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Although, it does returns an &lt;code&gt;EmptySet()&lt;/code&gt; on substituting absurd values:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solveset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmptySet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, we need not make any changes to the &lt;code&gt;Pow&lt;/code&gt; handling in &lt;code&gt;invert_real&lt;/code&gt; &amp;amp; It&amp;#39;s almost done now, except for a couple of TODO&amp;#39;s:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Document new changes&lt;/li&gt;
&lt;li&gt;Add More tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Though, I will wait for final thumbs up from &lt;a href=&quot;http://www.github.com/hargup&quot;&gt;@hargup&lt;/a&gt;, regarding this.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;from &lt;strong&gt;future&lt;/strong&gt; import plan&lt;/strong&gt;  Week #7:&lt;/h3&gt;

&lt;p&gt;This week I plan to complete &lt;a href=&quot;https://github.com/sympy/sympy/pull/9618&quot;&gt;PR #9628&lt;/a&gt; &amp;amp; get it Merged &amp;amp; start working on replacing old &lt;code&gt;solve&lt;/code&gt; in the code base with &lt;code&gt;solveset&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;$ git log&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Below is the list of other PR&amp;#39;s I worked on:&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/opr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9671&quot;&gt;PR #9671&lt;/a&gt; : Simplify &lt;code&gt;ComplexPlane({x}*{y})&lt;/code&gt; to &lt;code&gt;FiniteSet(x + I*y)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/opr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9668&quot;&gt;PR #9668&lt;/a&gt; : Support solving for Dummy symbols in linsolve&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/opr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9666&quot;&gt;PR #9666&lt;/a&gt; : Equate S.Complexes with &lt;code&gt;ComplexPlane(S.Reals*S.Reals)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/opr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9628&quot;&gt;PR #9628&lt;/a&gt; : [WIP] Make invert_real more robust&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/opr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9587&quot;&gt;PR #9587&lt;/a&gt; : Add Linsolve Docs&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/opr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9500&quot;&gt;PR #9500&lt;/a&gt; :  Documenting &lt;code&gt;solveset&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
That&amp;#39;s all for now, looking forward for week #8. :grinning:&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GSoC &#58; This week in SymPy &#35;6</title>
   <link href="http://0.0.0.0:4000/blog/GSoC-week-6"/>
   <updated>2015-07-06T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/GSoC &#58; This week in SymPy &#35;6</id>
   <content type="html">&lt;p&gt;Hi there! It&amp;#39;s been six weeks into &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Summer_of_Code&quot;&gt;GSoC&lt;/a&gt;,
and it marks the half of GSoC. The Mid term evaluations have been done now, Google has been preety quick doing this, I recieved the passing mail within 15 minutes after the deadline to fill up evaluations, so basically GSoC Admin did the following, (I guess):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GSoCStudents&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EvaluationResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;PASS&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SendThemMail&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Don&amp;#39;t Judge my SQL, I am not good at it!)&lt;/p&gt;

&lt;h3&gt;&amp;nbsp; &lt;strong&gt;Progress of Week 6&lt;/strong&gt; &lt;img style=&quot;float: left&quot; src=&quot;/assets/gsoc/pr.png&quot;&gt;&lt;/h3&gt;

&lt;p&gt;&lt;/br&gt;
Last week my &lt;code&gt;Linsolve&lt;/code&gt; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9438&quot;&gt;PR #9438&lt;/a&gt;
finally got Merged Thanks! to &lt;a href=&quot;http://github.com/hargup&quot;&gt;@hargup&lt;/a&gt; &lt;a href=&quot;http://github.com/moorepants&quot;&gt;@moorepants&lt;/a&gt; &lt;a href=&quot;http://github.com/flacjacket&quot;&gt;@flacjacket&lt;/a&gt; &lt;a href=&quot;http://github.com/debugger22&quot;&gt;@debugger22&lt;/a&gt; for reviewing it and suggesting constructive changes.&lt;/p&gt;

&lt;p&gt;This week I worked on Intersection&amp;#39;s of &lt;code&gt;FiniteSet&lt;/code&gt; with symbolic elements, which was a blocking issue for lot of things, I managed to Fix the failing test which I mentioned in my last post. Eventually this PR got Merged as well, which has opened doors for lot of improvements.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/jksuom&quot;&gt;@jksuom&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/hargup&quot;&gt;@hargup&lt;/a&gt; for iterating over this PR, and making some very useful comments for improving it to make it Mergeable.&lt;/p&gt;

&lt;p&gt;I had a couple of hangout meeting with &lt;a href=&quot;https://github.com/hargup&quot;&gt;@hargup&lt;/a&gt; this week, (though now he has left for SciPy for a couple of weeks), we discussed about the further plan, for making &lt;code&gt;solveset&lt;/code&gt; more robust, such as like returning the domain of invert while calling the &lt;code&gt;invert_real&lt;/code&gt; , See &lt;a href=&quot;https://github.com/sympy/sympy/issues/9617&quot;&gt;#9617&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Motivation for this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solveset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The solution returned above is not actually complete, unless, somehow we state &lt;code&gt;n&lt;/code&gt; should be positive for the output set to be non-Empty. See &lt;a href=&quot;https://github.com/sympy/sympy/issues/9588&quot;&gt;#9588&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;from &lt;strong&gt;future&lt;/strong&gt; import plan&lt;/strong&gt;  Week #7:&lt;/h3&gt;

&lt;p&gt;This week I plan to work on making &lt;code&gt;invert_real&lt;/code&gt; more robust.&lt;/p&gt;

&lt;p&gt;Relavant Issue:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/issues/9617&quot;&gt;#9617&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/issues/9588&quot;&gt;#9588&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;strong&gt;$ git log&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/opr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9618&quot;&gt;PR #9618&lt;/a&gt; : Add test for &lt;code&gt;solveset(x**2 + a, x)&lt;/code&gt; issue 9557&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/opr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9587&quot;&gt;PR #9587&lt;/a&gt; : Add Linsolve Docs&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/opr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9500&quot;&gt;PR #9500&lt;/a&gt; :  Documenting &lt;code&gt;solveset&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/mpr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9612&quot;&gt;PR #9612&lt;/a&gt; : solveset return solution for &lt;code&gt;solveset(True, ..)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/mpr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9540&quot;&gt;PR #9540&lt;/a&gt; : Intersection&amp;#39;s of FiniteSet with symbolic elements&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/mpr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9438&quot;&gt;PR #9438&lt;/a&gt; : Linsolve&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/mpr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9463&quot;&gt;PR #9463&lt;/a&gt; : ComplexPlane &lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img style=&quot;float: left&quot; src=&quot;/assets/gsoc/mpr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9527&quot;&gt;PR #9527&lt;/a&gt; : Printing of ProductSets  &lt;/br&gt; &lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img style=&quot;float: left&quot; src=&quot;/assets/gsoc/mpr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9524&quot;&gt;PR # 9524&lt;/a&gt; : Fix solveset returned solution making denom zero &lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
That&amp;#39;s all for now, looking forward for week #7. :grinning:&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GSoC &#58; This week in SymPy &#35;4 &amp; &#35;5</title>
   <link href="http://0.0.0.0:4000/blog/GSoC-week-4-5"/>
   <updated>2015-06-23T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/GSoC &#58; This week in SymPy &#35;4 &#38; 5</id>
   <content type="html">&lt;p&gt;Hi there! It&amp;#39;s been five weeks into &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Summer_of_Code&quot;&gt;GSoC&lt;/a&gt;, 
This week, I worked on polishing my previous PR&amp;#39;s to improve coverage and
fixing some bugs.&lt;/p&gt;

&lt;h3&gt;&amp;nbsp; &lt;strong&gt;Progress of Week 4 &amp;amp; 5&lt;/strong&gt; &lt;img style=&quot;float: left&quot; src=&quot;/assets/gsoc/pr.png&quot;&gt;&lt;/h3&gt;

&lt;p&gt;&lt;/br&gt;
During the last couple of weeks my &lt;code&gt;ComplexPlane&lt;/code&gt; Class &lt;a href=&quot;https://github.com/sympy/sympy/pull/9463&quot;&gt;PR #9438&lt;/a&gt;
finally got &lt;strong&gt;&lt;em&gt;Merged&lt;/em&gt;&lt;/strong&gt; thanks to &lt;a href=&quot;http://github.com/hargup&quot;&gt;Harsh&lt;/a&gt; for thoroughly reviewing it and suggesting constructive changes.&lt;/p&gt;

&lt;p&gt;For this I Managed to improve it&amp;#39;s coverage to perfect 100%, which is indeed satisfying, as it depicts all the new code being pushed is completely tested.&lt;/p&gt;

&lt;p&gt;This week I also improved the Exception handling and coverage in my &lt;code&gt;linsolve&lt;/code&gt; &lt;a href=&quot;https://github.com/sympy/sympy/pull/&quot;&gt;PR&lt;/a&gt;, It also have a 100% coverage.&lt;/p&gt;

&lt;h3&gt;Coverage Report&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; [1] &lt;code&gt;gauss_jordan_solve&lt;/code&gt; &lt;strong&gt;100 %&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt; [2] &lt;code&gt;linsolve&lt;/code&gt; : &lt;strong&gt;100: %&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Ref:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;[1] &lt;a href=&quot;http://iamit.in/sympy/coverage-report/matrices/&quot;&gt;http://iamit.in/sympy/coverage-report/matrices/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[2] &lt;a href=&quot;http://iamit.in/sympy/coverage-report/solveset/&quot;&gt;http://iamit.in/sympy/coverage-report/solveset/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;#39;s good to be Merged now.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Blocking Issue&lt;/strong&gt;: Intersection&amp;#39;s of FiniteSet with symbolic elements&lt;/h3&gt;

&lt;p&gt;During Week 5, While working on transcendental equation solver in &lt;code&gt;solveset.py&lt;/code&gt;, I discovered a blocking issue in &lt;code&gt;FiniteSets&lt;/code&gt;, which is with the Intersection of &lt;code&gt;FiniteSet&lt;/code&gt; containing symbolic elements, for example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FiniteSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intersect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EmptySet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Currently, either &lt;code&gt;FiniteSet&lt;/code&gt; is able to evaluate intersection otherwise it, returns an &lt;code&gt;EmptySet()&lt;/code&gt;.
(See &lt;a href=&quot;https://github.com/sympy/sympy/issues/9536&quot;&gt;9536&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/sympy/sympy/issues/8217&quot;&gt;8217&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;To fix this, I have opened the PR &lt;a href=&quot;https://github.com/sympy/sympy/pull/9540&quot;&gt;#9540&lt;/a&gt;.
Currently It fixes both the issues (&lt;a href=&quot;https://github.com/sympy/sympy/issues/9536&quot;&gt;9536&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/sympy/sympy/issues/8217&quot;&gt;8217&lt;/a&gt;), but there are some failing tests using the current behaviour of &lt;code&gt;FiniteSet&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;For example:&lt;/h4&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;x y z&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FiniteSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FiniteSet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;In Master:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intersect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;It should rather be:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intersect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intersection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The current behavior of FiniteSet in Master is non-acceptable, since in the above example &lt;code&gt;x, y, z&lt;/code&gt; are integer symbols, so they can be any integer, but in the &lt;em&gt;Master&lt;/em&gt; , they are assumed to be distinct, which is wrong.
There are such failing tests in &lt;code&gt;test_wester.py&lt;/code&gt; &lt;a href=&quot;https://github.com/sympy/sympy/blob/master/sympy/core/tests/test_wester.py#L74&quot;&gt;here&lt;/a&gt;, which is updated here: &lt;a href=&quot;https://github.com/aktech/sympy/commit/e8e6a0bb9285c315e9bade2bcd10b954760d4965&quot;&gt;aktech@e8e6a0b&lt;/a&gt; to incorporate with the right behaviour.&lt;/p&gt;

&lt;p&gt;As of now there are a couple of failing tests, which needs to passed, before we can &lt;strong&gt;Merge&lt;/strong&gt; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9540&quot;&gt;#9540&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;TODO Failing Tests:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://travis-ci.org/sympy/sympy/jobs/67831123&quot;&gt;sympy/stats/tests/test_rv.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://travis-ci.org/sympy/sympy/jobs/67831130&quot;&gt;sympy/combinatorics/tests/test_partitions.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;&lt;strong&gt;from &lt;strong&gt;future&lt;/strong&gt; import plan&lt;/strong&gt;  Week #6:&lt;/h3&gt;

&lt;p&gt;This week I plan to &lt;a href=&quot;https://github.com/sympy/sympy/pull/9540&quot;&gt;Fix Intersection&amp;#39;s of FiniteSet with symbolic elements&lt;/a&gt; &amp;amp; start working on &lt;code&gt;LambertW&lt;/code&gt; solver in &lt;code&gt;solveset&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;$ git log&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/opr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9540&quot;&gt;PR #9540&lt;/a&gt; : Intersection&amp;#39;s of FiniteSet with symbolic elements&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/opr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9438&quot;&gt;PR #9438&lt;/a&gt; : Linsolve&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/mpr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9463&quot;&gt;PR #9463&lt;/a&gt; : ComplexPlane &lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img style=&quot;float: left&quot; src=&quot;/assets/gsoc/mpr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9527&quot;&gt;PR #9527&lt;/a&gt; : Printing of ProductSets  &lt;/br&gt; &lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img style=&quot;float: left&quot; src=&quot;/assets/gsoc/mpr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9524&quot;&gt;PR # 9524&lt;/a&gt; : Fix solveset returned solution making denom zero &lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
That&amp;#39;s all for now, looking forward for week #6. :grinning:&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GSoC &#58; This week in SymPy &#35;3</title>
   <link href="http://0.0.0.0:4000/blog/GSoC-week-3"/>
   <updated>2015-06-17T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/GSoC &#58; This week in SymPy &#35;3</id>
   <content type="html">&lt;p&gt;Hi there! It&amp;#39;s been three weeks into &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Summer_of_Code&quot;&gt;GSoC&lt;/a&gt;, &amp;amp; I have managed to get some pace.
This week, I worked on creating &lt;code&gt;ComplexPlane&lt;/code&gt; Class.&lt;/p&gt;

&lt;h3&gt;&amp;nbsp; &lt;strong&gt;Progress of Week 3&lt;/strong&gt; &lt;img style=&quot;float: left&quot; src=&quot;/assets/gsoc/pr.png&quot;&gt;&lt;/h3&gt;

&lt;p&gt;The major portion of this week went onto creating &lt;code&gt;ComplexPlane&lt;/code&gt; Class. &lt;/br&gt;
&lt;a href=&quot;https://github.com/sympy/sympy/pull/9463&quot;&gt;PR #9438&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Design&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The design for the ComplexPlane class supports both forms of representation of Complex regions in &lt;a href=&quot;https://en.wikipedia.org/wiki/Complex_plane&quot;&gt;Complex Plane.&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Polar form&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Polar form is where a complex number is denoted by the &lt;em&gt;length&lt;/em&gt; (&lt;strong&gt;&lt;em&gt;r&lt;/em&gt;&lt;/strong&gt;) (otherwise known as the magnitude, absolute value, or modulus) and the &lt;em&gt;angle&lt;/em&gt; (&lt;strong&gt;&lt;em&gt;Œ∏&lt;/em&gt;&lt;/strong&gt;) of its vector.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Rectangular form&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Rectangular form, on the other hand, is where a complex number is denoted by its respective &lt;em&gt;horizontal&lt;/em&gt; (&lt;strong&gt;&lt;em&gt;x&lt;/em&gt;&lt;/strong&gt;) and &lt;em&gt;vertical&lt;/em&gt; (&lt;strong&gt;&lt;em&gt;y&lt;/em&gt;&lt;/strong&gt;) components. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gsoc/complex_repr.png&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Initial Approach&lt;/h3&gt;

&lt;p&gt;While writing code for &lt;code&gt;ComplexPlane&lt;/code&gt; class, we started with the following design: 
Input &lt;a href=&quot;https://en.wikipedia.org/wiki/Interval_(mathematics)&quot;&gt;Interval&lt;/a&gt; of a and b interval, as following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;ComplexPlane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a_interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b_interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;code&gt;a_interval&lt;/code&gt; &amp;amp; &lt;code&gt;b_interval&lt;/code&gt; are the respective intervals of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; for complex number in rectangular form or the respective intervals of &lt;code&gt;r&lt;/code&gt; and &lt;code&gt;Œ∏&lt;/code&gt; for complex number in polar form when polar flag is True.&lt;/p&gt;

&lt;p&gt;But the &lt;strong&gt;&lt;em&gt;problem&lt;/em&gt;&lt;/strong&gt; with this approach is that &lt;strong&gt;&lt;em&gt;we can&amp;#39;t represent two different regions in a single&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;ComplexPlane&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;call&lt;/em&gt;&lt;/strong&gt;, i.e. , for example let say we have two rectangular regions be represented as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gsoc/complex_rect.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;We have to represent this with two&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;ComplexPlane&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;calls:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;rect1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ComplexPlane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rect2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ComplexPlane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shaded_region&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rect1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rect2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Similiary for, the following polar region:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gsoc/complex_polar.png&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;halfdisk1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ComplexPlane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;halfdisk2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ComplexPlane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                         &lt;span class=&quot;n&quot;&gt;polar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shaded_region&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;halfdisk1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;halfdisk2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Better Approach&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;&lt;em&gt;solution&lt;/em&gt;&lt;/strong&gt; to the above problem is to &lt;strong&gt;&lt;em&gt;wrap up two calls of&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;ComplexPlane&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;into one&lt;/em&gt;&lt;/strong&gt;. To do this, a better input API was needed, and the problem was solved with the help of &lt;strong&gt;&lt;code&gt;ProductSet&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now we take input in the form of &lt;a href=&quot;http://mathworld.wolfram.com/ProductSet.html&quot;&gt;&lt;code&gt;ProductSet&lt;/code&gt;&lt;/a&gt; or Union of ProductSets:&lt;/p&gt;

&lt;p&gt;The region above is represented as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For Rectangular Form&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;psets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;Interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shaded_region&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ComplexPlane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;psets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;For Polar Form&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;psets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Union&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;Interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;shaded_region&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ComplexPlane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;psets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt;
The input &lt;code&gt;Œ∏&lt;/code&gt; interval for polar form tolerates any interval in terms of &lt;code&gt;œÄ&lt;/code&gt; , it is handled by the function &lt;code&gt;normalize_theta_set&lt;/code&gt; (wrote using &lt;code&gt;_pi_coeff&lt;/code&gt; function), It normalizes &lt;code&gt;Œ∏&lt;/code&gt; set to an equivalent interval in &lt;code&gt;[0, 2œÄ)&lt;/code&gt;, which simplifies various other methods such as &lt;code&gt;_union&lt;/code&gt;, &lt;code&gt;_intersect&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;from &lt;strong&gt;future&lt;/strong&gt; import plan&lt;/strong&gt;  Week #4:&lt;/h3&gt;

&lt;p&gt;This week I plan to polish my pending PR&amp;#39;s to get them Merged &amp;amp; start working on &lt;code&gt;LambertW&lt;/code&gt; solver in &lt;code&gt;solveset&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;$ git log&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/opr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9438&quot;&gt;PR #9438&lt;/a&gt; : Linsolve&lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img align=&quot;left&quot; src=&quot;/assets/gsoc/opr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9463&quot;&gt;PR #9463&lt;/a&gt; : ComplexPlane &lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img style=&quot;float: left&quot; src=&quot;/assets/gsoc/opr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9527&quot;&gt;PR #9527&lt;/a&gt; : Printing of ProductSets  &lt;/br&gt; &lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
&lt;img style=&quot;float: left&quot; src=&quot;/assets/gsoc/mpr.png&quot;&gt; &amp;nbsp; &lt;a href=&quot;https://github.com/sympy/sympy/pull/9524&quot;&gt;PR # 9524&lt;/a&gt; : Fix solveset returned solution making denom zero &lt;/p&gt;

&lt;p&gt;&lt;/br&gt;
That&amp;#39;s all for now, looking forward for week #4. :grinning:&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GSoC &#58; This week in SymPy &#35;2</title>
   <link href="http://0.0.0.0:4000/blog/GSoC-week-2"/>
   <updated>2015-06-07T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/GSoC &#58; This week in SymPy &#35;2 </id>
   <content type="html">&lt;p&gt;Hi there! It&amp;#39;s been two weeks into GSoC, &amp;amp; I have managed to flip some bits.&lt;/p&gt;

&lt;p&gt;This week, I started working on &lt;code&gt;ComplexPlane&lt;/code&gt; Class, &amp;amp; also worked on improving &lt;code&gt;linsolve&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Progress of Week 2&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gsoc/pr.png&quot;&gt; &lt;/p&gt;

&lt;p&gt;The major portion of this week went into improving &lt;code&gt;linsolve&lt;/code&gt; function, which I wrote last week, 
PR : &lt;strong&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/9438&quot;&gt;#9438&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.github.com/moorepants&quot;&gt;Jason&lt;/a&gt; suggested to let the Matrix code be the core source for all linear solve operations (i.e. remove all algorithmic solve code from everywhere else in sympy). Then for any linear solve stuff that can&amp;#39;t be handled by the Matrix code base, implement that here in &lt;code&gt;linsolve&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It was indeed a good idea, since solving linear system is more of Matrix stuff than that of solvers in CAS, So we introduced a new solver in &lt;code&gt;matrices.py&lt;/code&gt; named as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gauss_jordan_solve()&lt;/code&gt; : It solves &lt;code&gt;Ax = b&lt;/code&gt; using Gauss Jordan elimination.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There may be zero, one, or infinite solutions.  If one solution
exists, it will be returned. If infinite solutions exist, it will
be returned parametrically in terms of Dummy parameters. If no solutions exist, It will throw
ValueError.&lt;/p&gt;

&lt;p&gt;Now &lt;code&gt;linsolve&lt;/code&gt; is a light wrapper around &lt;code&gt;gauss_jordan_solve()&lt;/code&gt; method, it basically converts all the input types into the standard A &amp;amp; b form &amp;amp; calls A.gauss&lt;em&gt;jordan&lt;/em&gt;solve() and replaces the dummy parameters with the symbols input by the user.&lt;/p&gt;

&lt;h3&gt;Plan for Week 3:&lt;/h3&gt;

&lt;p&gt;This week I plan to complete ComplexPlane class &amp;amp; get the following PR&amp;#39;s Merged:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/9438&quot;&gt;PR #9438&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/9463&quot;&gt;PR #9463&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;#39;s all for now, looking forward for week #3.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GSoC &#58; This week in SymPy &#35;1</title>
   <link href="http://0.0.0.0:4000/blog/GSoC-week-1"/>
   <updated>2015-06-01T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/GSoC &#58; This week in SymPy &#35;1</id>
   <content type="html">&lt;p&gt;Hi there! The First week of the coding period has came to an end, this week has been very hectic for me due to my practicals and Minor project submission at college, though I mananged to reach the goal for this week.&lt;/p&gt;

&lt;p&gt;This week, I worked on Linear system solver &lt;code&gt;linsolve&lt;/code&gt; in the &lt;code&gt;solveset&lt;/code&gt; Module, as I mentioned in my last &lt;a href=&quot;http://iamit.in/blog/GSoC-Getting-Up-For-the-Coding-Period/&quot;&gt;post&lt;/a&gt;, about my goals for Week 1. &lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Progress of Week 1&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gsoc/pr.png&quot;&gt; I implemented the following two functions: &lt;/br&gt;
PR : &lt;strong&gt;&lt;a href=&quot;https://github.com/sympy/sympy/pull/9438&quot;&gt;#9438&lt;/a&gt;&lt;/strong&gt;.
It&amp;#39;s almost good to merge after a final review by &lt;a href=&quot;http://www.github.com/flacjacket&quot;&gt;flacjacket&lt;/a&gt; &amp;amp; &lt;a href=&quot;http://www.github.com/hargup&quot;&gt;hargup&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;linear_eq_to_matrix&lt;/code&gt;&lt;/strong&gt; : &lt;em&gt;method to convert system of linear Equations to Matrix Form.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;linsolve&lt;/code&gt;&lt;/strong&gt;: &lt;em&gt;It&amp;#39;s the General Linear System solver.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;http://www.github.com/moorepants&quot;&gt;Jason&lt;/a&gt; for reviewing my initial implementation &amp;amp; suggesting useful changes.&lt;/p&gt;

&lt;h3&gt;Algorithm Used&lt;/h3&gt;

&lt;p&gt;The algorithm used in &lt;code&gt;linsolve&lt;/code&gt; is Gauss-Jordan elimination, which results, after elimination, in an reduced row echelon form matrix. (used &lt;code&gt;rref()&lt;/code&gt; method of matrices)&lt;/p&gt;

&lt;h3&gt;Capabilities of Linsolve&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;linsolve&lt;/code&gt; is a powerful linear system solver, It can solve all types of linear systems, accepted in all input forms, hence providing a user friendly Public API. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;under-determined&lt;/em&gt;&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linsolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]:{(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;well-behaved&lt;/em&gt;&lt;/strong&gt;: &lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Eqns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linsolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Eqns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]:{(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;over-determined&lt;/em&gt;&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Parametrized solution&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linsolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]:{(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# No solution&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linsolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;....&lt;/span&gt;
&lt;span class=&quot;ne&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Linear&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;The input formats supported:&lt;/br&gt;&lt;/h3&gt;

&lt;p&gt;(as mentioned in my last &lt;a href=&quot;http://iamit.in/blog/GSoC-Getting-Up-For-the-Coding-Period/&quot;&gt;post&lt;/a&gt;)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Augmented Matrix Form&lt;/li&gt;
&lt;li&gt;List Of Equations Form&lt;/li&gt;
&lt;li&gt;Input A &amp;amp; b Matrix Form (from &lt;code&gt;Ax = b&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Plan for Week 2:&lt;/h3&gt;

&lt;p&gt;This week I plan to work on Complex Sets.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s all for now, looking forward for week #2.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>GSoC &#58; Getting Up For the Coding Period</title>
   <link href="http://0.0.0.0:4000/blog/GSoC-Getting-Up-For-the-Coding-Period"/>
   <updated>2015-05-24T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/GSoC &#58; Getting-Up-For-the-Coding-Period </id>
   <content type="html">&lt;h3&gt;&lt;strong&gt;The Start of Coding Period!&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The Community bonding Period is close to end now &amp;amp; my Exams as well. Tomorrow starts the Coding Period &amp;amp; I have been waiting for it for some time now. &lt;/p&gt;

&lt;p&gt;Recently I gave a quick look to my Proposed Timeline in my &lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2015-Application-AMiT-Kumar--Solvers-:-Extending-Solveset#timeline&quot;&gt;Proposal&lt;/a&gt;, &amp;amp;  decided to swap the 2nd Week&amp;#39;s work with Ist, this will help me securing few credits in my College&amp;#39;s Minor Project Submission (Which has the deadline of 30th May).&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Plan for Week 1&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;This week, I am planning to work on Solving Linear systems in &lt;code&gt;solveset&lt;/code&gt;. (Currently solveset support univariate solvers only).&lt;/p&gt;

&lt;p&gt;The main functions, I would be implementing are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;eq_to_matrix&lt;/code&gt; :
&lt;em&gt;method to convert system of Equations to Matrix Form.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;linsolve&lt;/code&gt;: &lt;em&gt;It&amp;#39;s the General Linear System solver.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As mentioned in the proposal, Solving system of linear equations is an important feature of solvers in a CAS. Most of the CAS have a convenient single function to solve linear systems, for example &lt;code&gt;LinearSolve&lt;/code&gt; in Mathematica.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&lt;code&gt;linsolve&lt;/code&gt;&lt;/strong&gt; which I would be implementing is inspired from Matlab &amp;amp; Maxima.&lt;/p&gt;

&lt;h5&gt;&lt;strong&gt;Features Overview&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;We have a lot of reusable code in &lt;code&gt;sympy.matrices&lt;/code&gt;  &amp;amp; &lt;code&gt;sympy.solvers.solvers&lt;/code&gt;, which would be quite useful.
One of the most important thing I would like to have in &lt;code&gt;linsolve&lt;/code&gt; is supporting a lot of input formats.
Though, most of the CAS suport only one input format. This feature would be quite useful for sympy&amp;#39;s &lt;code&gt;linsolve&lt;/code&gt;.&lt;/p&gt;

&lt;h6&gt;The three most common input formats, I can recall as of now are:&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;Augmented Matrix Form&lt;/li&gt;
&lt;li&gt;List Of Equations Form&lt;/li&gt;
&lt;li&gt;Input A &amp;amp; b Matrix Form (from &lt;code&gt;Ax = b&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It would be great to have all three input formats supported in the Public API &lt;code&gt;linsolve&lt;/code&gt; Method.&lt;/p&gt;

&lt;p&gt;Looking forward for Coding Period, that&amp;#39;s all for now.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Google Summer Of Code with SymPy</title>
   <link href="http://0.0.0.0:4000/blog/Google-Summer-Of-Code-with-SymPy"/>
   <updated>2015-04-28T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/Google-Summer-Of-Code-with-SymPy</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;/assets/gsoc/GSOC2015.png&quot; alt=&quot;GSoC 2015&quot;&gt;&lt;/p&gt;

&lt;p&gt;Yay! the much awaited results of &lt;a href=&quot;http://www.google-melange.com/gsoc/projects/list/google/gsoc2015&quot;&gt;Google Summer Of Code&lt;/a&gt; is out now, and I have been selected to work with &lt;a href=&quot;http://www.sympy.org/&quot;&gt;SymPy&lt;/a&gt; under &lt;a href=&quot;https://www.python.org/psf/&quot;&gt;Python Software Foundation.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;For those who don&amp;#39;t know about GSoC&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Google_Summer_of_Code&quot;&gt;Google Summer of Code&lt;/a&gt;&lt;/strong&gt; is a global program that offers students stipends to write code for open source projects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;A bit about SymPy&lt;/h3&gt;

&lt;p&gt;&lt;img style=&quot;float: right&quot; src=&quot;/assets/gsoc/sympy.png&quot;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;SymPy is a Python library for symbolic mathematics. It aims to become a full-featured &lt;strong&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Computer_algebra_system&quot;&gt;Computer Algebra System&lt;/a&gt;&lt;/strong&gt; (CAS) while keeping the code as simple as possible in order to be comprehensible and easily extensible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;About My Project&lt;/h3&gt;

&lt;p&gt;My Project is being mentored by some really awesome guys &lt;a href=&quot;https://github.com/certik&quot;&gt;Ond≈ôej ƒåert√≠k&lt;/a&gt;, &lt;a href=&quot;https://github.com/flacjacket&quot;&gt;Sean Vig&lt;/a&gt; and &lt;a href=&quot;https://github.com/hargup&quot;&gt;Harsh Gupta&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Project aims at improving the current Equation solvers in SymPy. The Current solve is a huge mess, It needs to be broken into various sub-hints, to make the code more robust, modular, and approachable for developers, moving in lines of the new API, as developed in solveset. Currently the new API is implemented for univariate Equations only, we need to incorporate it for linear systems, multivariate equations &amp;amp; transcendental by rewriting the solvers for these in the new solveset Module.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sympy/sympy/wiki/GSoC-2015-Application-AMiT-Kumar--Solvers-:-Extending-Solveset&quot;&gt;Here is my Proposal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Looking forward for a great summer with SymPy!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Higher order functions in Python &#58; sorted, map, reduce, filter</title>
   <link href="http://0.0.0.0:4000/blog/Higher-order-functions-in-Python-sorted-map-reduce-filter"/>
   <updated>2015-02-09T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/Higher order functions in Python &#58; sorted, map, reduce, filter</id>
   <content type="html">&lt;p&gt;Python has a pretty good support for Higher order functions, we are going to learn their implementation here :bulb: .&lt;/p&gt;

&lt;h2&gt;What are higher order functions?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;&amp;quot;Functions that take a function as an argument or return a function.&amp;quot;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# calling the function that is passed&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello bar&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# function bar is passed to function foo.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Functions and methods are &lt;a href=&quot;http://en.wikipedia.org/wiki/First-class_citizen&quot;&gt;first-class citizen&lt;/a&gt; (objects) in Python, so if we want to pass a function as an argument to another function, we can just treat it as any other object. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It&amp;#39;s worth noting that in some languages functions and objects are distinct, but in python functions are implemented as objects (That also means functions have attributes).&lt;/p&gt;

&lt;h2&gt;sorted&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://wiki.python.org/moin/HowTo/Sorting&quot;&gt;sorted&lt;/a&gt; does pretty much the same thing what you expected.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# sorting numbers&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# sorting alphabetically&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Using Key :key:&lt;/h4&gt;

&lt;p&gt;Well you can also &lt;strong&gt;&lt;em&gt;customize&lt;/em&gt;&lt;/strong&gt; the sorting also, the parameter &lt;code&gt;key&lt;/code&gt;.
The key needs to be a simple function the takes a single value that tells python the value to use in sorting it. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# sorting normally&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# sorting by absolute values&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note: abs is the absolute value function. i.e. &lt;code&gt;abs(-3) = 3&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;map&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Takes an input iterable of values and return a list with different values. Same order, same length, but mapped via a function.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;map(function, iterable)&lt;/code&gt;
map takes a function as the first parameter and then an iterable containing data.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;twice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
           &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;twice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;filter&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;filter takes a function and an iterable and produces an output list of every item on the input list that passes a test&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greater_than_5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greater_than_5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Special case&lt;/em&gt;&lt;/strong&gt;: When &lt;code&gt;None&lt;/code&gt; is passed instead of function, it will filter by Truthiness.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;reduce&lt;/h2&gt;

&lt;p&gt;reduce takes an iterable of input data and consumes it to come up with a single value.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The function we have to write is different too - the function will take two values and typically reduce will consume the first two values from the iterable then consume one value at a time from the list using the return value from the previous call.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/reduce/reduce.png&quot; alt=&quot;reduce&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; 

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr&gt;
</content>
 </entry>
 
 <entry>
   <title>Migrated to Jekyll and Github Pages</title>
   <link href="http://0.0.0.0:4000/blog/Migrated-to-Jekyll-and-Github-Pages"/>
   <updated>2015-01-19T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/Migrated to Jekyll and Github Pages</id>
   <content type="html">&lt;p&gt;I have been procrastinating for this for a long time, but finally I made this transition from &lt;a href=&quot;http://wordpress.com/&quot;&gt;Wordress&lt;/a&gt; to &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; yesterday, though it doesn&amp;#39;t requires you to be a ninja but you need to patiently learn the things for once atleast.&lt;/p&gt;

&lt;hr&gt;

&lt;blockquote&gt;
&lt;p&gt;I skimed through several blogs to learn the process, but I found this pretty usefull:
&lt;a href=&quot;http://jmcglone.com/guides/github-pages/&quot;&gt;http://jmcglone.com/guides/github-pages/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Good Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://packetlife.net/media/library/16/Markdown.pdf&quot;&gt;Markdown Cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tiimgreen/github-cheat-sheet&quot;&gt;Github Cheat Sheet&lt;/a&gt; (If you are not familiar with Github.)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jekyll/jekyll/wiki/Sites&quot;&gt;Sites Using Jekyll&lt;/a&gt; (Usefull for theme Idea)&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Spoj FCTRL2 Explanation and Solution</title>
   <link href="http://0.0.0.0:4000/blog/Spoj-Problem-Small-Factorials-FCTRL2-Explanation-and-Solution"/>
   <updated>2014-12-12T00:00:00+05:30</updated>
   <id>http://0.0.0.0:4000/blog/Spoj FCTRL2 Explanation and Solution</id>
   <content type="html">&lt;h2&gt;Problem:&lt;/h2&gt;

&lt;p&gt;In this &lt;a href=&quot;http://www.spoj.com/problems/FCTRL2/&quot;&gt;Problem&lt;/a&gt;
, we are required to find Factorials of numbers ranging from 1 to 100, but  Since an unsigned 64-bit Integer can store upto 19 decimal digits, where as 100! has 150+ digits, so we can‚Äôt use Int Data type.&lt;/p&gt;

&lt;p&gt;The simplest data structure which can be used to store such results is an Array.   In the simplest form we can store 1-digit at every index of array.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;em&gt;How to store a two (or more) digit number  in an Array (one digit per index) ?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We need to store the input ‚Äòn‚Äô (1-100) into an array to find it‚Äôs Factorial To store a Number in an array, we can grab the digits from least significant position  (For Example 1456) one by one and put it into the array.                                                                                                                                                                                                                    For example:  To put 123 into an array (let say a[50]), we will grab the last digits one by one, final array would be given as  a[] = {3,2,1}  i.e. a[0]=3, a[1]=2, a[2]=1 &amp;amp; so on‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LOGIC used for this&lt;/strong&gt;: Let n = 123 then  1). let rem = n%10 (this means remainder when n is divided by 10)  2. a[index] = rem     3. n = n/10  (this removes the last digit from n, Now we are ready to grab the second last digit &amp;amp; so on)  Repeating this step iteratively, we can save n into an array.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;em&gt;How To Find the Factorial of the Number stored in array?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After we have put the input number (1-100) into an array, we have to now find its Factorial. To do that we have to multiply the number ‚Äòn‚Äô with (n-1), (n-2) ‚Ä¶ &amp;amp; so on ‚Ä¶3.2.1 . Now we need to find an Algorithm for multiplying an Integer with a number stored into an array &amp;amp; we can use that algorithm for all multiplications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let us take an Example&lt;/strong&gt;:    Let the n be 45, so we have to find it‚Äôs factorial &lt;br&gt;
&lt;em&gt;45! = 45 x 44 x 43 x ‚Ä¶ x 37 x ‚Ä¶ 4 x 3 x 2 x 1&lt;/em&gt;. Now put the number 45 into a sufficiently large array (such as a[200]).  Now lets us multiply the array a[] = {5,4} with a number, let say 37&lt;/p&gt;

&lt;p&gt;The array will be:
a[0] = 5
a[1] = 4
and the value of m will be 2 specifying that there are 2 digits in the array currently.&lt;/p&gt;

&lt;h2&gt;Codechef Tutorial&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Now, to multiply this array with the value 37. We start off from the index 0 of the array to index 1. At every iteration, we calculate 37 * a[index]. We also maintain a temporary variable called temp which is initialized to 0. Now, at every step, we calculate x = a[index] * 37 + temp. The new value of a[index] will be x % 10 and the new value of temp will be temp / 10. We are simply carrying out multiplication the way it is carried out usually  (The Process is shown in Figure below). So, for the current situation, the iterations will be something like this.&lt;/p&gt;

&lt;p&gt;Initialize temp = 0
Iteration 1 : 
array = (5, 4)
temp = 0
index = 0, a[index] = 5
x = a[index] * 37 + temp = 5 * 37 + 0 = 185.
the new value of a[index] = 185 % 10 which is 5 and the new value of temp is 185 / 10 which is 18&lt;/p&gt;

&lt;p&gt;Iteration 2 :
array : (5, 4)
temp = 18
index = 1, a[index] = 4
x = a[index] * 37 + temp = 4 * 37 + 18 = 166.
the new value of a[index] = 166 % 10 which is 6 and the new value of temp is 166 / 10 which is 16&lt;/p&gt;

&lt;p&gt;We have finished 2 iterations and this is the value of ‚Äòm‚Äò, the array size at the moment. The required number of iterations is now over, but the value oftemp is still greater than 0. This means that the current value of temp is to be incorporated into the array. For that, we keep appending the last digit oftemp to the array and divide temp by 10 till temp becomes 0. So, we will get something like
Iteration 1 : 
temp = 16 , array = (5, 6)
So, we add 16 % 10 to the array so that the array becomes (5, 6, 6) and we divide temp by 10 so that temp becomes 1. We update the value of ‚Äòm‚Äô to m + 1 that is m = 3
Iteration 2 :
temp = 1, array = (5, 6, 6)
Now, we add 1 % 10 to the array so the array becomes (5, 6, 6, 1) and we divide temp by 10 so that temp becomes 0. We update the value of ‚Äòm‚Äô to m + 1 that is m = 4&lt;/p&gt;

&lt;p&gt;The value of temp is now 0 and our multiplication is now over. The final array we get is (5, 6, 6, 1)&lt;/p&gt;

&lt;p&gt;Voila, we have the answer to 45 * 37 in our array with the Least significant digit in the 0th position. :)&lt;/p&gt;

&lt;p&gt;For finding the factorial, we need to carry out this exact multiplication operation at every step as we loop from 1 to N. At the end of the Nth iteration, our array will contain
the answer and the value of m will be the number of digits in the answer. We can then just print the array from the Most significant digit to the least for the answer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/fctrl2/fctrl2.png&quot; alt=&quot;Multiply 45 * 37&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Code in C++&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Source Code Of Above Algorithm:&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;##include&amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
             &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

         &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

              &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];}&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thanks to this Tutorial at &lt;a href=&quot;http://blog.codechef.com/2009/07/02/tutorial-for-small-factorials/&quot;&gt;Codechef&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Code in Python&lt;/h2&gt;

&lt;p&gt;For Python Freaks, it‚Äôs a cakewalk.
10 lines of code!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;factl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;factl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;factl&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 

</feed>